# logV starts from 0; y starts from 1
y <- array(0, 1000)
ln_v <- array(0, 1001)
for (i in 2:1001){
ln_v[i] <- 0.5 - 0.332 * ln_v[i-1] + 0.12 * rnorm(1, 0, 1)
y[i-1] <- sqrt(exp(ln_v[i])) * rnorm(1, 0, 1)
}
library(invgamma)
seed=4002; num_it=1e5
#MCMC_SV <- function(y, num_it=1e5, seed=4002){
MH_V <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
log_target <- function(logV_t){
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
sigma2 <- lamb / (1 + psi^2)
-0.5*logV_t - y_t^2/(2*exp(logV_t)) - (logV_t - mu_t)^2/(2*sigma2)
}
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
target_diff <- exp(log_target(logV_prop) - log_target(logV_t))
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
#return (MH_V(logV_, y_t, phi, psi, lamb))
return (logV_t)
}
MH_V_2 <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
nominator <- exp(-y_t^2/2 * exp(-logV_prop))
denominator <- exp(-y_t^2/2 * exp(-mu_t) * (1 + mu_t - logV_prop))
target_diff <- nominator / denominator
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
return (logV_t)
return (MH_V(logV_, y_t, phi, psi, lamb))
}
# prior: phi ~ N(0, 1); psi ~ N(0, 1); sigma ~ IG(2.5, 0.025)
mu_phi <- 0; sig2_phi <- 1; mu_psi <- 0; sig2_psi <- 1; alpha_lamb <- 2.5; beta_lamb <- 0.025
T <- length(y)
set.seed(seed)
phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
#phi <- 0.6 ; psi <- -0.4; lamb <- 0.2
logV_hist <- matrix(0, nrow=num_it, ncol=T+1)
phi_hist <- array(phi, dim=num_it)
psi_hist <- array(psi, dim=num_it)
lamb_hist <- array(lamb, dim=num_it)
for (t in 2:T+1){
logV_hist[1,t] <- phi + psi * logV_hist[1,t-1] + sqrt(lamb) * rnorm(1, 0, 1)
}
for (i in 2:num_it){
# MH sampling for ln V
logV <- c(logV_hist[i-1,], 0)
for (t in 1:T){
# logV starts from 0; y starts from 1
# a little bug for t = 0 and t = T + 1, but run it first
logV[t+1] <- MH_V(logV[c(t, t+1, t+2)], y[t], phi, psi, lamb)
}
logV <- logV[-(T+2)]
# Gibbs sampling for parameters
mu_phi <- (sig2_phi*sum(logV[-1]-psi*logV[-(T+1)]) + lamb*mu_phi)/(T*sig2_phi + lamb)
sig2_phi <- lamb*sig2_phi/(T*sig2_phi + lamb)
phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
mu_psi <- (sig2_psi*sum(logV[-(T+1)]*(logV[-1]-phi)) + lamb*mu_psi) / (sig2_psi*sum(logV[-(T+1)]^2) + lamb)
sig2_psi <- lamb*sig2_psi/(sig2_psi*sum(logV[-(T+1)]^2) + lamb)
psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
#alpha_lamb <- alpha_lamb + T/2
beta_lamb <- 1/2*sum((logV[-1] - phi - psi*logV[-(T+1)])^2) + beta_lamb
lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
phi <- sum(logV[-1]-psi*logV[-(T+1)])/(T + lamb)
psi <- sum(logV[-(T+1)]*(logV[-1]-phi)) / (sum(logV[-(T+1)]^2) + lamb)
lamb <- beta_lamb / (T/2 + alpha_lamb - 1)
print(paste(phi, psi, lamb, i))
logV_hist[i,] <- logV
phi_hist[i] <- phi
psi_hist[i] <- psi
lamb_hist[i] <- lamb
}
set.seed(4002)
# logV starts from 0; y starts from 1
y <- array(0, 1000)
ln_v <- array(0, 1001)
for (i in 2:1001){
ln_v[i] <- 0.5 - 0.332 * ln_v[i-1] + 0.12 * rnorm(1, 0, 1)
y[i-1] <- sqrt(exp(ln_v[i])) * rnorm(1, 0, 1)
}
library(invgamma)
seed=4002; num_it=1e5
#MCMC_SV <- function(y, num_it=1e5, seed=4002){
MH_V <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
log_target <- function(logV_t){
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
sigma2 <- lamb / (1 + psi^2)
-0.5*logV_t - y_t^2/(2*exp(logV_t)) - (logV_t - mu_t)^2/(2*sigma2)
}
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
target_diff <- exp(log_target(logV_prop) - log_target(logV_t))
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
#return (MH_V(logV_, y_t, phi, psi, lamb))
return (logV_t)
}
MH_V_2 <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
nominator <- exp(-y_t^2/2 * exp(-logV_prop))
denominator <- exp(-y_t^2/2 * exp(-mu_t) * (1 + mu_t - logV_prop))
target_diff <- nominator / denominator
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
return (logV_t)
return (MH_V(logV_, y_t, phi, psi, lamb))
}
# prior: phi ~ N(0, 1); psi ~ N(0, 1); sigma ~ IG(2.5, 0.025)
mu_phi <- 0; sig2_phi <- 1; mu_psi <- 0; sig2_psi <- 1; alpha_lamb <- 2.5; beta_lamb <- 0.025
T <- length(y)
set.seed(seed)
phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
#phi <- 0.6 ; psi <- -0.4; lamb <- 0.2
logV_hist <- matrix(0, nrow=num_it, ncol=T+1)
phi_hist <- array(phi, dim=num_it)
psi_hist <- array(psi, dim=num_it)
lamb_hist <- array(lamb, dim=num_it)
for (t in 2:T+1){
logV_hist[1,t] <- phi + psi * logV_hist[1,t-1] + sqrt(lamb) * rnorm(1, 0, 1)
}
for (i in 2:num_it){
# MH sampling for ln V
logV <- c(logV_hist[i-1,], 0)
for (t in 1:T){
# logV starts from 0; y starts from 1
# a little bug for t = 0 and t = T + 1, but run it first
logV[t+1] <- MH_V(logV[c(t, t+1, t+2)], y[t], phi, psi, lamb)
}
logV <- logV[-(T+2)]
# Gibbs sampling for parameters
# mu_phi <- (sig2_phi*sum(logV[-1]-psi*logV[-(T+1)]) + lamb*mu_phi)/(T*sig2_phi + lamb)
# sig2_phi <- lamb*sig2_phi/(T*sig2_phi + lamb)
# phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
#
# mu_psi <- (sig2_psi*sum(logV[-(T+1)]*(logV[-1]-phi)) + lamb*mu_psi) / (sig2_psi*sum(logV[-(T+1)]^2) + lamb)
# sig2_psi <- lamb*sig2_psi/(sig2_psi*sum(logV[-(T+1)]^2) + lamb)
# psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
#
# #alpha_lamb <- alpha_lamb + T/2
#
# beta_lamb <- 1/2*sum((logV[-1] - phi - psi*logV[-(T+1)])^2) + beta_lamb
# lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
beta_lamb <- 1/2*sum((logV[-1] - phi - psi*logV[-(T+1)])^2) + beta_lamb
phi <- sum(logV[-1]-psi*logV[-(T+1)])/(T + lamb)
psi <- sum(logV[-(T+1)]*(logV[-1]-phi)) / (sum(logV[-(T+1)]^2) + lamb)
lamb <- beta_lamb / (T/2 + alpha_lamb - 1)
print(paste(phi, psi, lamb, i))
logV_hist[i,] <- logV
phi_hist[i] <- phi
psi_hist[i] <- psi
lamb_hist[i] <- lamb
}
set.seed(4002)
# logV starts from 0; y starts from 1
y <- array(0, 1000)
ln_v <- array(0, 1001)
for (i in 2:1001){
ln_v[i] <- 0.5 - 0.332 * ln_v[i-1] + 0.12 * rnorm(1, 0, 1)
y[i-1] <- sqrt(exp(ln_v[i])) * rnorm(1, 0, 1)
}
library(invgamma)
seed=4002; num_it=1e5
#MCMC_SV <- function(y, num_it=1e5, seed=4002){
MH_V <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
log_target <- function(logV_t){
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
sigma2 <- lamb / (1 + psi^2)
-0.5*logV_t - y_t^2/(2*exp(logV_t)) - (logV_t - mu_t)^2/(2*sigma2)
}
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
target_diff <- exp(log_target(logV_prop) - log_target(logV_t))
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
#return (MH_V(logV_, y_t, phi, psi, lamb))
return (logV_t)
}
MH_V_2 <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
nominator <- exp(-y_t^2/2 * exp(-logV_prop))
denominator <- exp(-y_t^2/2 * exp(-mu_t) * (1 + mu_t - logV_prop))
target_diff <- nominator / denominator
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
return (logV_t)
return (MH_V(logV_, y_t, phi, psi, lamb))
}
# prior: phi ~ N(0, 1); psi ~ N(0, 1); sigma ~ IG(2.5, 0.025)
mu_phi <- 0; sig2_phi <- 1; mu_psi <- 0; sig2_psi <- 1; alpha_lamb <- 2.5; beta_lamb <- 0.025
T <- length(y)
set.seed(seed)
phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
#phi <- 0.6 ; psi <- -0.4; lamb <- 0.2
logV_hist <- matrix(0, nrow=num_it, ncol=T+1)
phi_hist <- array(phi, dim=num_it)
psi_hist <- array(psi, dim=num_it)
lamb_hist <- array(lamb, dim=num_it)
for (t in 2:T+1){
logV_hist[1,t] <- phi + psi * logV_hist[1,t-1] + sqrt(lamb) * rnorm(1, 0, 1)
}
for (i in 2:num_it){
# MH sampling for ln V
logV <- c(logV_hist[i-1,], 0)
for (t in 1:T){
# logV starts from 0; y starts from 1
# a little bug for t = 0 and t = T + 1, but run it first
logV[t+1] <- MH_V(logV[c(t, t+1, t+2)], y[t], phi, psi, lamb)
}
logV <- logV[-(T+2)]
# Gibbs sampling for parameters
# mu_phi <- (sig2_phi*sum(logV[-1]-psi*logV[-(T+1)]) + lamb*mu_phi)/(T*sig2_phi + lamb)
# sig2_phi <- lamb*sig2_phi/(T*sig2_phi + lamb)
# phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
#
# mu_psi <- (sig2_psi*sum(logV[-(T+1)]*(logV[-1]-phi)) + lamb*mu_psi) / (sig2_psi*sum(logV[-(T+1)]^2) + lamb)
# sig2_psi <- lamb*sig2_psi/(sig2_psi*sum(logV[-(T+1)]^2) + lamb)
# psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
#
# #alpha_lamb <- alpha_lamb + T/2
#
# beta_lamb <- 1/2*sum((logV[-1] - phi - psi*logV[-(T+1)])^2) + beta_lamb
# lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
beta_ <- 1/2*sum((logV[-1] - phi - psi*logV[-(T+1)])^2) + beta_lamb
phi <- sum(logV[-1]-psi*logV[-(T+1)])/(T + lamb)
psi <- sum(logV[-(T+1)]*(logV[-1]-phi)) / (sum(logV[-(T+1)]^2) + lamb)
lamb <- beta_ / (T/2 + alpha_lamb - 1)
print(paste(phi, psi, lamb, i))
logV_hist[i,] <- logV
phi_hist[i] <- phi
psi_hist[i] <- psi
lamb_hist[i] <- lamb
}
#}
set.seed(4002)
# logV starts from 0; y starts from 1
y <- array(0, 1000)
ln_v <- array(0, 1001)
for (i in 2:1001){
ln_v[i] <- 0.5 - 0.332 * ln_v[i-1] + 0.12 * rnorm(1, 0, 1)
y[i-1] <- sqrt(exp(ln_v[i])) * rnorm(1, 0, 1)
}
library(invgamma)
seed=4002; num_it=1e5
#MCMC_SV <- function(y, num_it=1e5, seed=4002){
MH_V <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
log_target <- function(logV_t){
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
sigma2 <- lamb / (1 + psi^2)
-0.5*logV_t - y_t^2/(2*exp(logV_t)) - (logV_t - mu_t)^2/(2*sigma2)
}
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
target_diff <- exp(log_target(logV_prop) - log_target(logV_t))
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
return (MH_V(logV_, y_t, phi, psi, lamb))
return (logV_t)
}
MH_V_2 <- function(logV_, y_t, phi, psi, lamb){
logV_old <- logV_[1]; logV_t <- logV_[2]; logV_new <- logV_[3]
mu_t <- (phi*(1-psi) + psi*(logV_new + logV_old)) / (1 + psi^2)
logV_prop <- phi + psi*logV_old + sqrt(lamb)*rnorm(1, 0, 1)
nominator <- exp(-y_t^2/2 * exp(-logV_prop))
denominator <- exp(-y_t^2/2 * exp(-mu_t) * (1 + mu_t - logV_prop))
target_diff <- nominator / denominator
if (!is.na(target_diff)){
if (runif(1) < min(1, target_diff)){
return (logV_prop)
}
}
return (logV_t)
return (MH_V(logV_, y_t, phi, psi, lamb))
}
# prior: phi ~ N(0, 1); psi ~ N(0, 1); sigma ~ IG(2.5, 0.025)
mu_phi <- 0; sig2_phi <- 1; mu_psi <- 0; sig2_psi <- 1; alpha_lamb <- 2.5; beta_lamb <- 0.025
T <- length(y)
set.seed(seed)
phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
#phi <- 0.6 ; psi <- -0.4; lamb <- 0.2
logV_hist <- matrix(0, nrow=num_it, ncol=T+1)
phi_hist <- array(phi, dim=num_it)
psi_hist <- array(psi, dim=num_it)
lamb_hist <- array(lamb, dim=num_it)
for (t in 2:T+1){
logV_hist[1,t] <- phi + psi * logV_hist[1,t-1] + sqrt(lamb) * rnorm(1, 0, 1)
}
for (i in 2:num_it){
# MH sampling for ln V
logV <- c(logV_hist[i-1,], 0)
for (t in 1:T){
# logV starts from 0; y starts from 1
# a little bug for t = 0 and t = T + 1, but run it first
logV[t+1] <- MH_V(logV[c(t, t+1, t+2)], y[t], phi, psi, lamb)
}
logV <- logV[-(T+2)]
# Gibbs sampling for parameters
# mu_phi <- (sig2_phi*sum(logV[-1]-psi*logV[-(T+1)]) + lamb*mu_phi)/(T*sig2_phi + lamb)
# sig2_phi <- lamb*sig2_phi/(T*sig2_phi + lamb)
# phi <- rnorm(1, mean=mu_phi, sd=sqrt(sig2_phi))
#
# mu_psi <- (sig2_psi*sum(logV[-(T+1)]*(logV[-1]-phi)) + lamb*mu_psi) / (sig2_psi*sum(logV[-(T+1)]^2) + lamb)
# sig2_psi <- lamb*sig2_psi/(sig2_psi*sum(logV[-(T+1)]^2) + lamb)
# psi <- rnorm(1, mean=mu_psi, sd=sqrt(sig2_psi))
#
# #alpha_lamb <- alpha_lamb + T/2
#
# beta_lamb <- 1/2*sum((logV[-1] - phi - psi*logV[-(T+1)])^2) + beta_lamb
# lamb <- rinvgamma(1, shape=alpha_lamb, rate=beta_lamb)
beta_ <- 1/2*sum((logV[-1] - phi - psi*logV[-(T+1)])^2) + beta_lamb
phi <- sum(logV[-1]-psi*logV[-(T+1)])/(T + lamb)
psi <- sum(logV[-(T+1)]*(logV[-1]-phi)) / (sum(logV[-(T+1)]^2) + lamb)
lamb <- beta_ / (T/2 + alpha_lamb - 1)
print(paste(phi, psi, lamb, i))
logV_hist[i,] <- logV
phi_hist[i] <- phi
psi_hist[i] <- psi
lamb_hist[i] <- lamb
}
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
d <- read.csv("../Datasets/fin-ratio.csv")      # read in dataset
# define HSI as a factor instead of a number for svm
d$HSI <- factor(d$HSI, levels=c(0,1))
# split data into training and testing sets with a ratio of 7:3
set.seed(4002)
train_ind <- sample(seq_len(nrow(d)), size=floor(0.7*nrow(d)))
d_train <- d[train_ind,]
d_test <- d[-train_ind,]
library(e1071)  # load the e1071 library for svm
svm_clf <- svm(formula=HSI~., data=d_train, kernel='linear',
scale=TRUE, cost=1)
y_pred <- predict(svm_clf, newdata=d_test)
table(y_pred, d_test$HSI)             # tabulate results
plot(svm_clf, d_test, CFTP~ln_MV, color.palette=cm.colors)
y_pred
library(e1071)
library(caret)
df <- read.csv("../Datasets/credit_scoring_sample.csv")
df <- na.omit(df)
# split df into training and testing sets with a ratio of 8:2
set.seed(4002)
train_idx <- sample(seq_len(nrow(df)), size=floor(0.8*nrow(df)))
df_train <- df[train_idx,]
df_test <- df[-train_idx,]
################################################################################
# Linear SVM
svm_lnr <- svm(SeriousDlqin2yrs~., data=df_train,
kernel="linear", cost=1, scale=TRUE)
ypred <- predict(svm_lnr, newdata=df_test)
mean(ypred == df_test$SeriousDlqin2yrs)
table(ypred, df_test$SeriousDlqin2yrs)
?predict.svm
ypred
ypred <- predict(svm_lnr, newdata=df_test) > 0
mean(ypred == df_test$SeriousDlqin2yrs)
ypred <- predict(svm_lnr, newdata=df_test) < 0
mean(ypred == df_test$SeriousDlqin2yrs)
table(ypred, df_test$SeriousDlqin2yrs)
ypred <- (predict(svm_lnr, newdata=df_test) < 0) + 0
mean(ypred == df_test$SeriousDlqin2yrs)
table(ypred, df_test$SeriousDlqin2yrs)
gamma <- function(sig) 1 / (2 * sig^2)
sigma <- c(0.5, 1, 5, 10, 100)
train_acc <- numeric(length(sigma))
test_acc <- numeric(length(sigma))
i = 1
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train, scale=TRUE,
kernel="radial", cost=1, gamma=gamma(sigma[i]))
ypred_train <- (predict(svm_rbf, newdata=df_train) < 0) + 0
ypred_test <- (predict(svm_rbf, newdata=df_test) < 0) + 0
ypred_train
mean(ypred_train == df_train$SeriousDlqin2yrs)
mean(ypred_test == df_test$SeriousDlqin2yrs)
predict(svm_rbf, newdata=df_train)
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train,
kernel="radial", cost=1, gamma=gamma(sigma[i]))
ypred_train <- (predict(svm_rbf, newdata=df_train) < 0) + 0
ypred_test <- (predict(svm_rbf, newdata=df_test) < 0) + 0
mean(ypred_train == df_train$SeriousDlqin2yrs)
?svm
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train, cost=1,
kernel="radial", gamma=gamma(sigma[i]), scale=FALSE)
ypred_train <- (predict(svm_rbf, newdata=df_train) < 0) + 0
ypred_test <- (predict(svm_rbf, newdata=df_test) < 0) + 0
mean(ypred_train == df_train$SeriousDlqin2yrs)
mean(ypred_test == df_test$SeriousDlqin2yrs)
# RBF SVM
gamma <- function(sig) 1 / (2 * sig^2)
sigma <- c(0.5, 1, 5, 10, 100)
train_acc <- numeric(length(sigma))
test_acc <- numeric(length(sigma))
for (i in seq_along(sigma)) {
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train, cost=1,
kernel="radial", gamma=gamma(sigma[i]), scale=FALSE)
ypred_train <- (predict(svm_rbf, newdata=df_train) < 0) + 0
ypred_test <- (predict(svm_rbf, newdata=df_test) < 0) + 0
train_acc[i] <- mean(ypred_train == df_train$SeriousDlqin2yrs)
test_acc[i] <- mean(ypred_test == df_test$SeriousDlqin2yrs)
}
data.frame(sigma=sigma, gamma=gamma(sigma),
train_accuracy=train_acc, test_accuracy=test_acc)
svm
summary(svm_rbf)
df_train
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train, cost=1, type="C-classification",
kernel="radial", gamma=gamma(sigma[i]), scale=FALSE)
ypred_train <- (predict(svm_rbf, newdata=df_train) < 0) + 0
ypred_test <- (predict(svm_rbf, newdata=df_test) < 0) + 0
predict(svm_rbf, newdata=df_train)
ypred_train <- predict(svm_rbf, newdata=df_train)
ypred_test <- predict(svm_rbf, newdata=df_test)
mean(ypred_train == df_train$SeriousDlqin2yrs)
mean(ypred_test == df_test$SeriousDlqin2yrs)
train_acc
sigma[i]
# RBF SVM
gamma <- function(sig) 1 / (2 * sig^2)
sigma <- c(0.5, 1, 5, 10, 100)
train_acc <- numeric(length(sigma))
test_acc <- numeric(length(sigma))
for (i in seq_along(sigma)) {
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train, cost=1,
type="C-classification", scale=FALSE,
kernel="radial", gamma=gamma(sigma[i]))
ypred_train <- predict(svm_rbf, newdata=df_train)
ypred_test <- predict(svm_rbf, newdata=df_test)
train_acc[i] <- mean(ypred_train == df_train$SeriousDlqin2yrs)
test_acc[i] <- mean(ypred_test == df_test$SeriousDlqin2yrs)
}
data.frame(sigma=sigma, gamma=gamma(sigma),
train_accuracy=train_acc, test_accuracy=test_acc)
# RBF SVM
gamma <- function(sig) 1 / (2 * sig^2)
sigma <- c(0.5, 1, 5, 10, 100)
train_acc <- numeric(length(sigma))
test_acc <- numeric(length(sigma))
for (i in seq_along(sigma)) {
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train, cost=1,
type="C-classification",
kernel="radial", gamma=gamma(sigma[i]))
ypred_train <- predict(svm_rbf, newdata=df_train)
ypred_test <- predict(svm_rbf, newdata=df_test)
train_acc[i] <- mean(ypred_train == df_train$SeriousDlqin2yrs)
test_acc[i] <- mean(ypred_test == df_test$SeriousDlqin2yrs)
}
data.frame(sigma=sigma, gamma=gamma(sigma),
train_accuracy=train_acc, test_accuracy=test_acc)
# RBF SVM
gamma <- function(sig) 1 / (2 * sig^2)
sigma <- c(0.5, 1, 5, 10, 50, 100)
train_acc <- numeric(length(sigma))
test_acc <- numeric(length(sigma))
for (i in seq_along(sigma)) {
svm_rbf <- svm(SeriousDlqin2yrs~., data=df_train, cost=1,
type="C-classification", scale=FALSE,
kernel="radial", gamma=gamma(sigma[i]))
ypred_train <- predict(svm_rbf, newdata=df_train)
ypred_test <- predict(svm_rbf, newdata=df_test)
train_acc[i] <- mean(ypred_train == df_train$SeriousDlqin2yrs)
test_acc[i] <- mean(ypred_test == df_test$SeriousDlqin2yrs)
}
data.frame(sigma=sigma, gamma=gamma(sigma),
train_accuracy=train_acc, test_accuracy=test_acc)
library(e1071)
library(caret)
df <- read.csv("../Datasets/credit_scoring_sample.csv")
df <- na.omit(df)
# split df into training and testing sets with a ratio of 8:2
set.seed(4002)
train_idx <- sample(seq_len(nrow(df)), size=floor(0.8*nrow(df)))
df_train <- df[train_idx,]
df_test <- df[-train_idx,]
colnames(df)
