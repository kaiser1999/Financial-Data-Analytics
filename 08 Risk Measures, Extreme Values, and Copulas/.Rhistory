mu_hist <- array(mu, dim=num_it)
phi_hist <- array(phi, dim=num_it)
nu_hist <- array(nu, dim=num_it)
h_hist[1,1] <- rnorm(1, mean=mu, sd=sqrt(nu/(1 - phi^2)))
for (t in 2:T) {
h_hist[1,t] <- mu + phi*(h[i-1] - mu) + sqrt(nu)*rnorm(1, 0, 1)
}
h_hist[1,t]
h_hist[1,]
i
h <- h_hist[i-1,]
t
t= 1
MH_h(t, h[c(t, t+1)], y[t], mu, phi, nu)
if (t == 1) {
h[t] <- MH_h(t, h[c(t, t+1)], y[t], mu, phi, nu)
}else if (t == T) {
h[t] <- MH_h(t, h[c(t-1, t)], y[t], mu, phi, nu)
}else{
h[t] <- MH_h(t, h[c(t-1, t, t+1)], y[t], mu, phi, nu)
}
for (t in 1:T){
if (t == 1) {
h[t] <- MH_h(t, h[c(t, t+1)], y[t], mu, phi, nu)
}else if (t == T) {
h[t] <- MH_h(t, h[c(t-1, t)], y[t], mu, phi, nu)
}else{
h[t] <- MH_h(t, h[c(t-1, t, t+1)], y[t], mu, phi, nu)
}
}
h
hat_beta2_mu <- ((1 - phi^2 + (T-1)*(1 - phi)^2)/nu + 1/beta2_mu)^{-1}
term_mu <- h[1]*(1 - phi^2) + (1 - phi)*sum(h[-1] - phi*h[-T])
hat_alpha_mu <- hat_beta2_mu * (term_mu/nu + alpha_mu/beta2_mu)
mu <- rnorm(1, mean=hat_alpha_mu, sd=sqrt(hat_beta2_mu))
alpha_mu <- hat_alpha_mu; beta2_mu <- hat_beta2_mu
hat_beta2_phi <- ((sum((h[-T] - mu)^2) - (h[1] - mu)^2)/nu + 1/beta2_phi)^{-1}
term_phi <- sum((h[-1] - mu)*(h[-T] - mu))
hat_alpha_phi <- hat_beta2_phi * (term_phi/nu + alpha_phi/beta2_phi)
phi <- rtruncnorm(1, a=-1, b=1, mean=hat_alpha_phi, sd=sqrt(hat_beta2_phi))
alpha_phi <- hat_alpha_phi; beta2_phi <- hat_beta2_phi
alpha_nu <- alpha_nu + T/2
beta_nu <- beta_nu + 1/2*(sum((h[-1] - mu - phi*(h[-T] - mu))^2) + (h[1] - mu)^2*(1 - phi^2))
nu <- rinvgamma(1, shape=alpha_nu, rate=beta_nu)
print(paste(mu, phi, nu, i))
mu <- alpha_mu; phi <- alpha_phi; nu <- beta_nu/(alpha_nu - 1)
print(paste(mu, phi, nu, i, alpha_nu))
hat_beta2_phi
hat_alpha_phi
(term_phi/nu + alpha_phi/beta2_phi)
term_phi
nu
term_phi/nu
alpha_phi
beta2_phi
alpha_mu <- 0; beta2_mu <- 10; alpha_phi <- 0; beta2_phi <- 1
alpha_nu <- 2.5; beta_nu <- 0.025
mu <- -0.6 ; phi <- 0.4; nu <- 0.1
h_hist <- matrix(0, nrow=num_it, ncol=T)
mu_hist <- array(mu, dim=num_it)
phi_hist <- array(phi, dim=num_it)
nu_hist <- array(nu, dim=num_it)
h_hist[1,1] <- rnorm(1, mean=mu, sd=sqrt(nu/(1 - phi^2)))
for (t in 2:T) {
h_hist[1,t] <- mu + phi*(h[i-1] - mu) + sqrt(nu)*rnorm(1, 0, 1)
}
for (i in 2:num_it){
# MH sampling for h
h <- h_hist[i-1,]
for (t in 1:T){
if (t == 1) {
h[t] <- MH_h(t, h[c(t, t+1)], y[t], mu, phi, nu)
}else if (t == T) {
h[t] <- MH_h(t, h[c(t-1, t)], y[t], mu, phi, nu)
}else{
h[t] <- MH_h(t, h[c(t-1, t, t+1)], y[t], mu, phi, nu)
}
}
# Gibbs sampling for parameters
hat_beta2_mu <- ((1 - phi^2 + (T-1)*(1 - phi)^2)/nu + 1/beta2_mu)^{-1}
term_mu <- h[1]*(1 - phi^2) + (1 - phi)*sum(h[-1] - phi*h[-T])
hat_alpha_mu <- hat_beta2_mu * (term_mu/nu + alpha_mu/beta2_mu)
mu <- rnorm(1, mean=hat_alpha_mu, sd=sqrt(hat_beta2_mu))
alpha_mu <- hat_alpha_mu; beta2_mu <- hat_beta2_mu
hat_beta2_phi <- ((sum((h[-T] - mu)^2) - (h[1] - mu)^2)/nu + 1/beta2_phi)^{-1}
term_phi <- sum((h[-1] - mu)*(h[-T] - mu))
hat_alpha_phi <- hat_beta2_phi * (term_phi/nu + alpha_phi/beta2_phi)
phi <- rtruncnorm(1, a=-1, b=1, mean=hat_alpha_phi, sd=sqrt(hat_beta2_phi))
alpha_phi <- hat_alpha_phi; beta2_phi <- hat_beta2_phi
alpha_nu <- alpha_nu + T/2
beta_nu <- beta_nu + 1/2*(sum((h[-1] - mu - phi*(h[-T] - mu))^2) + (h[1] - mu)^2*(1 - phi^2))
nu <- rinvgamma(1, shape=alpha_nu, rate=beta_nu)
print(paste(mu, phi, nu, i))
mu <- alpha_mu; phi <- alpha_phi; nu <- beta_nu/(alpha_nu - 1)
print(paste(mu, phi, nu, i, alpha_nu))
h_hist[i,] <- h
mu_hist[i] <- mu
phi_hist[i] <- phi
nu_hist[i] <- nu
}
set.seed(seed)
mu <- rnorm(1, mean=alpha_mu, sd=sqrt(beta2_mu))
phi <- rtruncnorm(1, a=-1, b=1, mean=alpha_phi, sd=sqrt(beta2_phi))
phi
beta2_phi
alpha_phi
nu
term_phi
hat_beta2_phi
hat_alpha_phi
library(copula)
#library(evd)
library(LaplacesDemon)
################################################################################
# "copula" parameter in mvdc() can be any one of the following:
#(01) galambosCopula(2)
#(02) huslerReissCopula(0.3)
#(03) tawnCopula(0.3)
#(04) tevCopula(0.3, df=2, df.fixed=TRUE)
#(05) amhCopula(1, dim=2)
#(06) gumbelCopula(1, dim=2)
#(07) claytonCopula(1, dim=2)
#(08) frankCopula(3, dim=2)
#(09) joeCopula(1, dim=2)
#(10) fgmCopula(c(0.2,-0.2,-0.4), dim=2)
#(11) plackettCopula(param=2)
#(12) normalCopula(0.5, dim=3)
#(13) tCopula(0.5, dim=2, dispstr="toep", df=2, df.fixed=TRUE)
# "margins" and "paramMargins" parameters in mdvc() can be any one of the following:
# e.g. norm as long as pnorm, dnorm, qnorm, rnorm are all available
#(01) frechet: list(loc=0, scale=1, shape=2)
#(02) pareto: list(alpha=2)
#(03) exp: list(rate=1)
#(04) gamma: list(shape=1)
#(05) laplace: list(location=0, scale=1)
#(06) halfnorm: list(scale=1)
#(07) beta: list(shape1=2, shape2=3)
#(08) norm: list(mean=0, sd=1)
margin_lst <- list(frechet=list(name="Frechet", params=c("shape")),
pareto=list(name="Pareto", params=c("alpha")),
exp=list(name="Exp", params=c("rate")),
gamma=list(name="Gamma", params=c("shape")),
laplace=list(name="laplace", params=c("location", "scale")),
halfnorm=list(name="HalfNorm", params=c("scale")),
beta=list(name="Beta", params=c("shape1", "shape2")),
norm=list(name="Norm", params=c("mean", "sd")))
# beware Norm(mu,sd) here NOT Norm(mu,sd^2)!
get_legend <- function(margins, paramMargins){
text.legend <- c()
for (i in 1:length(margins)){
mar <- margins[i]; par <- paramMargins[[i]]
dist <- margin_lst[[mar]]
params <- paste0(par[dist$params], collapse=",")
text.legend[i] <- paste0(dist$name, "(", params, ")")
}
paste0(text.legend, collapse="+")
}
################################################################################
size <- 10^7
seed <- 4002
p <- seq(0.999, 0.99999, 0.000001)
get_quantile <- function(Z, p) quantile(rowSums(Z), p)/rowSums(apply(Z, 2, quantile, p))
################################################################################
### Clayton Copula with theta=1 ###
################################################################################
margins1 <- c("frechet", "frechet")
paramMargins1 <- list(list(loc=0, scale=1, shape=2),
list(loc=0, scale=1, shape=2))
margins2 <- c("frechet", "frechet")
paramMargins2 <- list(list(loc=0, scale=1, shape=1),
list(loc=0, scale=1, shape=1))
margins3 <- c("frechet", "frechet")
paramMargins3 <- list(list(loc=0, scale=1, shape=0.5),
list(loc=0, scale=1, shape=0.5))
set.seed(seed)
Z1 <- rMvdc(size, mvdc(copula=claytonCopula(1, dim=length(margins1)), margins=margins1, paramMargins=paramMargins1))
?pareto
?rpareto
length(NA)
length(NULL)
library(R.utils)
?tryCatch
e <- simpleError("test error")
tryCatch(stop(e), error=function(e) {NA})
a <- tryCatch(stop(e), error=function(e) {NA})
length(a)
# Initialize variables
S_0 <- 10; K <- 8; r <- 0.05; sigma <- 0.3; T <- 1
M_lst <- c(1e1, 1e2, 1e3); n <- 1e5
Sim_Asian <- function(n, M, S_0, K, r, sigma, T, theta){
delta_t <- T / M
Euler <- function(z, S_t, theta){
S_t*(1 + r*delta_t) + sigma*S_t^(theta/2)*sqrt(delta_t)*z
}
Milstein <- function(z, S_t, theta){
(Euler(z, S_t, theta) +
sigma^2*theta/2*S_t^(theta-1)*delta_t/2*(z^2-1))
}
Exact <- function(z, S_t, theta=2){
S_t*exp((r - sigma^2/2)*delta_t + sigma*sqrt(delta_t)*z)
}
# Asian_call
S_Eul <- S_0; avg_Eul <- S_0 / (M+1)
S_Mil <- S_0; avg_Mil <- S_0 / (M+1)
if (theta == 2) {
S_Ext <- S_0; avg_Ext <- S_0 / (M+1)
} else {
S_Ext <- NA; avg_Ext <- NA
}
for (m in 1:M){
z <- rnorm(n)
S_Eul <- Euler(z, S_Eul, theta)
avg_Eul <- avg_Eul + S_Eul/(M+1)
S_Mil <- Milstein(z, S_Mil, theta)
avg_Mil <- avg_Mil + S_Mil/(M+1)
if (theta == 2){
S_Ext <- Exact(z, S_Ext, theta)
avg_Ext <- avg_Ext + S_Ext/(M+1)
}
}
list(Eul=list(price=S_Eul, payoff=exp(-r*T)*pmax(avg_Eul-K, 0)),
Mil=list(price=S_Mil, payoff=exp(-r*T)*pmax(avg_Mil-K, 0)),
Ext=list(price=S_Ext, payoff=exp(-r*T)*pmax(avg_Ext-K, 0)))
}
################################################################################
BS_results <- data.frame(M=M_lst, n=n, Asian_Eul=0,
Asian_Mil=0, Asian_Ext=0)
par(mfrow=c(1,2))
for (i in 1:length(M_lst)){
M <- M_lst[i]
set.seed(4002)
Asian_BS <- Sim_Asian(n, M, S_0, K, r, sigma, T, 2)
BS_results$Asian_Eul[i] <- mean(Asian_BS$Eul$payoff)
BS_results$Asian_Mil[i] <- mean(Asian_BS$Mil$payoff)
BS_results$Asian_Ext[i] <- mean(Asian_BS$Ext$payoff)
Eul_diff <- Asian_BS$Ext$price - Asian_BS$Eul$price
Mil_diff <- Asian_BS$Ext$price - Asian_BS$Mil$price
print(paste(diff(range(Eul_diff)), diff(range(Mil_diff)),
diff(range(Eul_diff))/diff(range(Mil_diff))))
hist(Eul_diff, xlim=c(-max(abs(Eul_diff)), max(abs(Eul_diff))),
xlab="Error", main="Euler Scheme")
hist(Mil_diff, xlim=c(-max(abs(Mil_diff)), max(abs(Mil_diff))),
xlab="Error", main="Milstein Scheme")
}
BS_results
################################################################################
M <- 1e3; n_lst <- c(1e3, 1e4, 1e5, 1e6)
BS_results <- data.frame(M=M_lst, n=n, Asian_Eul=0,
Asian_Mil=0, Asian_Ext=0)
par(mfrow=c(1,2))
for (i in 1:length(n_lst)){
n <- n_lst[i]
set.seed(4002)
Asian_BS <- Sim_Asian(n, M, S_0, K, r, sigma, T, 2)
BS_results$Asian_Eul[i] <- mean(Asian_BS$Eul$payoff)
BS_results$Asian_Mil[i] <- mean(Asian_BS$Mil$payoff)
BS_results$Asian_Ext[i] <- mean(Asian_BS$Ext$payoff)
Eul_diff <- Asian_BS$Ext$price - Asian_BS$Eul$price
Mil_diff <- Asian_BS$Ext$price - Asian_BS$Mil$price
print(paste(diff(range(Eul_diff)), diff(range(Mil_diff)),
diff(range(Eul_diff))/diff(range(Mil_diff))))
hist(Eul_diff, xlim=c(-max(abs(Eul_diff)), max(abs(Eul_diff))),
xlab="Error", main="Euler Scheme")
hist(Mil_diff, xlim=c(-max(abs(Mil_diff)), max(abs(Mil_diff))),
xlab="Error", main="Milstein Scheme")
}
M <- 1e3; n_lst <- c(1e3, 1e4, 1e5, 1e6)
BS_results <- data.frame(M=M, n=n_lst, Asian_Eul=0,
Asian_Mil=0, Asian_Ext=0)
par(mfrow=c(2,length(n_lst)))
for (i in 1:length(n_lst)){
n <- n_lst[i]
set.seed(4002)
Asian_BS <- Sim_Asian(n, M, S_0, K, r, sigma, T, 2)
BS_results$Asian_Eul[i] <- mean(Asian_BS$Eul$payoff)
BS_results$Asian_Mil[i] <- mean(Asian_BS$Mil$payoff)
BS_results$Asian_Ext[i] <- mean(Asian_BS$Ext$payoff)
Eul_diff <- Asian_BS$Ext$price - Asian_BS$Eul$price
Mil_diff <- Asian_BS$Ext$price - Asian_BS$Mil$price
print(paste(diff(range(Eul_diff)), diff(range(Mil_diff)),
diff(range(Eul_diff))/diff(range(Mil_diff))))
hist(Eul_diff, xlim=c(-max(abs(Eul_diff)), max(abs(Eul_diff))),
xlab="Error", main="Euler Scheme")
hist(Mil_diff, xlim=c(-max(abs(Mil_diff)), max(abs(Mil_diff))),
xlab="Error", main="Milstein Scheme")
}
BS_results
M <- 1e3; n_lst <- c(1e3, 1e4, 1e5, 1e6, 1e7)
BS_results <- data.frame(M=M, n=n_lst, Asian_Eul=0,
Asian_Mil=0, Asian_Ext=0)
par(mfcol=c(2,length(n_lst)))
for (i in 1:length(n_lst)){
n <- n_lst[i]
set.seed(4002)
Asian_BS <- Sim_Asian(n, M, S_0, K, r, sigma, T, 2)
BS_results$Asian_Eul[i] <- mean(Asian_BS$Eul$payoff)
BS_results$Asian_Mil[i] <- mean(Asian_BS$Mil$payoff)
BS_results$Asian_Ext[i] <- mean(Asian_BS$Ext$payoff)
Eul_diff <- Asian_BS$Ext$price - Asian_BS$Eul$price
Mil_diff <- Asian_BS$Ext$price - Asian_BS$Mil$price
print(paste(diff(range(Eul_diff)), diff(range(Mil_diff)),
diff(range(Eul_diff))/diff(range(Mil_diff))))
hist(Eul_diff, xlim=c(-max(abs(Eul_diff)), max(abs(Eul_diff))),
xlab="Error", main="Euler Scheme")
hist(Mil_diff, xlim=c(-max(abs(Mil_diff)), max(abs(Mil_diff))),
xlab="Error", main="Milstein Scheme")
}
BS_results
n_size <- seq(500, 100000, by=500)
length(n_size)
library(copula)
library(evd)              # frechet
library(LaplacesDemon)    # pareto, laplace, halfnorm
##################
size <- 2000
seed <- 4002
################################################################################
### Archimedean Copulae ###
################################################################################
par.old <- par()
par(mfrow=c(1,2), mar=c(2, 2, 2, 2))
################################################################################
set.seed(seed)
plot(rCopula(size, amhCopula(0.2, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, amhCopula(0.8, dim=2)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, claytonCopula(-0.5, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, claytonCopula(8, dim=2)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, frankCopula(2, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, frankCopula(8, dim=2)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, gumbelCopula(2, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, gumbelCopula(6, dim=2)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, joeCopula(2, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, joeCopula(6, dim=2)), col="blue", ylab="", xlab="")
################################################################################
### Extreme Value Copulae ###
################################################################################
set.seed(seed)
plot(rCopula(size, galambosCopula(2)), col="blue", ylab="", xlab="")
plot(rCopula(size, galambosCopula(8)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, huslerReissCopula(2)), col="blue", ylab="", xlab="")
plot(rCopula(size, huslerReissCopula(8)), col="blue", ylab="", xlab="")
?galambosCopula
set.seed(seed)
plot(rCopula(size, galambosCopula(2)), col="blue", ylab="", xlab="")
plot(rCopula(size, galambosCopula(6)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, galambosCopula(2)), col="blue", ylab="", xlab="")
plot(rCopula(size, galambosCopula(8)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, amhCopula(0.2, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, amhCopula(0.8, dim=2)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, amhCopula(0.2, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, amhCopula(0.9, dim=2)), col="blue", ylab="", xlab="")
set.seed(seed)
plot(rCopula(size, amhCopula(0.2, dim=2)), col="blue", ylab="", xlab="")
plot(rCopula(size, amhCopula(0.9, dim=2)), col="blue", ylab="", xlab="")
library(copula)
library(evd)              # frechet
library(LaplacesDemon)    # pareto, laplace, halfnorm
################################################################################
# "copula" parameter in mvdc() can be any one of the following:
#(01) galambosCopula(2)
#(02) huslerReissCopula(0.3)
#(03) tawnCopula(0.3)
#(04) tevCopula(0.3, df=2, df.fixed=TRUE)
#(05) amhCopula(1, dim=2)
#(06) gumbelCopula(1, dim=2)
#(07) claytonCopula(1, dim=2)
#(08) frankCopula(3, dim=2)
#(09) joeCopula(1, dim=2)
#(10) fgmCopula(c(0.2,-0.2,-0.4), dim=2)
#(11) plackettCopula(param=2)
#(12) normalCopula(0.5, dim=3)
#(13) tCopula(0.5, dim=2, dispstr="toep", df=2, df.fixed=TRUE)
# "margins" and "paramMargins" parameters in mdvc() can be any one of the following:
# e.g. norm as long as pnorm, dnorm, qnorm, rnorm are all available
#(01) frechet: list(loc=0, scale=1, shape=2)
#(02) pareto: list(alpha=2)
#(03) exp: list(rate=1)
#(04) gamma: list(shape=1)
#(05) laplace: list(location=0, scale=1)
#(06) halfnorm: list(scale=1)
#(07) beta: list(shape1=2, shape2=3)
#(08) norm: list(mean=0, sd=1)
margin_lst <- list(frechet=list(name="Frechet", params=c("shape")),
pareto=list(name="Pareto", params=c("alpha")),
exp=list(name="Exp", params=c("rate")),
gamma=list(name="Gamma", params=c("shape")),
laplace=list(name="laplace", params=c("location", "scale")),
halfnorm=list(name="HalfNorm", params=c("scale")),
beta=list(name="Beta", params=c("shape1", "shape2")),
norm=list(name="Norm", params=c("mean", "sd")))
# beware Norm(mu,sd) here NOT Norm(mu,sd^2)!
get_legend <- function(margins, paramMargins){
text.legend <- c()
for (i in 1:length(margins)){
mar <- margins[i]; par <- paramMargins[[i]]
dist <- margin_lst[[mar]]
params <- paste0(par[dist$params], collapse=",")
text.legend[i] <- paste0(dist$name, "(", params, ")")
}
paste0(text.legend, collapse="+")
}
################################################################################
size <- 10^7
seed <- 4002
p <- seq(0.999, 0.99999, 0.000001)
get_quantile <- function(Z, p) quantile(rowSums(Z), p)/rowSums(apply(Z, 2, quantile, p))
margins1 <- c("exp", "exp")
paramMargins1 <- list(list(rate=1),
list(rate=1))
margins2 <- c("halfnorm", "halfnorm")
paramMargins2 <- list(list(scale=1),
list(scale=1))
margins3 <- c("beta", "beta")
paramMargins3 <- list(list(shape1=2, shape2=3),
list(shape1=2, shape2=3))
set.seed(seed)
Z1 <- rMvdc(size, mvdc(copula=gumbelCopula(1.5, dim=length(margins1)), margins=margins1, paramMargins=paramMargins1))
Z2 <- rMvdc(size, mvdc(copula=gumbelCopula(1.5, dim=length(margins2)), margins=margins2, paramMargins=paramMargins2))
Z3 <- rMvdc(size, mvdc(copula=gumbelCopula(1.5, dim=length(margins3)), margins=margins3, paramMargins=paramMargins3))
plot(p, get_quantile(Z1, p), lty=1, type="l", col="blue", lwd=2,
ylim=c(0.9, 1.05), pch=16, xlab="p", ylab="V@R Ratio", cex.main=1)
lines(p, get_quantile(Z2, p), lty=2, type="l", col="black", lwd=2)
abline(h=c(1), lwd=1.5, lty=4, col="orange")
text.legend <- c(get_legend(margins1, paramMargins1), get_legend(margins2, paramMargins2))
legend("bottomleft", legend=text.legend, lty=1:2, col=c("blue", "black"), lwd=2, cex=1,
text.width=max(strwidth(text.legend))*1.2)
plot(p, get_quantile(Z3, p), lty=3, type="l", col="red", lwd=2,
ylim=c(0.9, 1.05), pch=16, xlab="p", ylab="V@R Ratio", cex.main=1)
abline(h=c(1), lwd=1.5, lty=4, col="orange")
text.legend <- c(get_legend(margins3, paramMargins3))
legend("bottomleft", legend=text.legend, lty=3, col=c("red"), lwd=2, cex=1,
text.width=max(strwidth(text.legend))*1.2)
plot(p, get_quantile(Z1, p), lty=1, type="l", col="blue", lwd=2,
ylim=c(0.9, 1.05), pch=16, xlab="p", ylab="V@R Ratio", cex.main=1)
lines(p, get_quantile(Z2, p), lty=2, type="l", col="black", lwd=2)
abline(h=c(1), lwd=1.5, lty=4, col="orange")
text.legend <- c(get_legend(margins1, paramMargins1), get_legend(margins2, paramMargins2))
legend("bottomleft", legend=text.legend, lty=1:2, col=c("blue", "black"), lwd=2, cex=1,
text.width=max(strwidth(text.legend))*1.2)
plot(p, get_quantile(Z3, p), lty=3, type="l", col="red", lwd=2,
ylim=c(0.9, 1.05), pch=16, xlab="p", ylab="V@R Ratio", cex.main=1)
abline(h=c(1), lwd=1.5, lty=4, col="orange")
text.legend <- c(get_legend(margins3, paramMargins3))
legend("bottomleft", legend=text.legend, lty=3, col=c("red"), lwd=2, cex=1,
text.width=max(strwidth(text.legend))*1.2)
?quantile
library(discretization)
install.packages("discretization")
library(discretization)
data(iris)
mdlp(iris)$Disc.data
X <- iris[,c(1,2,3,4)]
X
MDLP(X)
mdlp(X)
mdlp(iris)
mdlp(iris)
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
######################################################################
d <- read.csv("../Datasets/stock_1999_2002.csv", row.names=1) # read in data file
d <- as.ts(d)
x_n <- as.vector(d[nrow(d),]) # select the last obs
w <- c(40000, 30000, 30000)   # investment amount on each stock
p_0 <- sum(w)	                # total investment amount
w_s <- w/x_n                  # no. of shares bought at day n
h_sim <- t(t(lag(d)/d) * x_n)
p_n <- h_sim %*% w_s          # portfolio value at day n
loss <- p_0 - p_n	            # loss
(VaR_sim <- quantile(loss, 0.99)) # 1-day 99% V@R
######################################################################
library(fGarch)               # load library "fGarch"
d <- read.csv("../Datasets/stock_1999_2002.csv", row.names=1) # read in data file
d <- as.ts(d)
u <- (lag(d)-d)/d
colnames(u) <- colnames(d)
x_n <- as.vector(d[nrow(d),]) # select the last obs
w <- c(40000, 30000, 30000)   # investment amount on each stock
p_0 <- sum(w)	                # total investment amount
w_s <- w/x_n                  # no. of shares bought at day n
model_HSBC <- garchFit(~garch(1, 1), data=u[,"HSBC"], include.mean=F, trace=F)
model_CLP <- garchFit(~garch(1, 1), data=u[,"CLP"], include.mean=F, trace=F)
model_CK <- garchFit(~garch(1, 1), data=u[,"CK"], include.mean=F, trace=F)
Bootstrap_GARCH <- function(model, u, t){
var_n_1 <- coef(model)[1] + coef(model)[2]*u[length(u)]^2 +
coef(model)[3]*model@h.t[length(u)]
t_i <- t[-1]; t_1i <- t[-length(t)]; t_n <- t[length(t)]
t_n*(t_1i+(t_i-t_1i)*sqrt(var_n_1/model@h.t))/t_1i
}
h_sim1 <- Bootstrap_GARCH(model_HSBC, u[,"HSBC"], d[,"HSBC"])
h_sim2 <- Bootstrap_GARCH(model_CLP, u[,"CLP"], d[,"CLP"])
h_sim3 <- Bootstrap_GARCH(model_CK, u[,"CK"], d[,"CK"])
h_sim <- cbind(h_sim1, h_sim2, h_sim3)
p_n <- h_sim %*% w_s
loss_GARCH <- p_0 - p_n     # loss
(VaR_GARCH <- quantile(loss_GARCH, 0.99))   # 1-day 99% VaR
p_n
plot(p_n)
plot(p_n, type="l")
loss_GARCH
plot(hsim1, type="l")
plot(h_sim1, type="l")
plot(h_sim2, type="l")
plot(h_sim3, type="l")
