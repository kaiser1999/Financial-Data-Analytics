jarque.bera.test(u[,"CK"])
############################################################
library("car")
QQt.plot <- function(u, comp=""){
z <- u - mean(u) # Remove mean
sz <- sort(z)		   # sort z
n <- length(z)		  # sample size
s <- sd(z)*sqrt((n-1)/n)	# Population standard deviation
ku <- sum(z^4)/(n*s^4) - 3	# Excess kurtosis
nu <- 6/ku + 4 # Degrees of freedom
i <- ((1:n)-0.5)/n  # create a vector of percentiles
q <- qt(i, nu)		  # percentile points from t(v)
plot(q, sz, main=paste("Self-defined t Q-Q Plot of ", comp, " Return"))
qqline(sz, distribution=function(p) qt(p, df=nu), probs=c(0.25, 0.75))
qqPlot(z, distribution="t", df=nu, envelope=FALSE, line="quartiles",
col.lines="black", lwd=1, cex=1, grid=FALSE, id=FALSE,
main=paste("t Q-Q Plot of ", comp, " Return"))
nu
}
par(mfrow=c(3,2), mar=c(4,4,4,4))
df_HSBC <- QQt.plot(u[,"HSBC"], comp="HSBC")
df_CLP <- QQt.plot(u[,"CLP"], comp="CLP")
df_CK <- QQt.plot(u[,"CK"], comp="CK")
############################################################
t_HSBC <- u[,"HSBC"]/sd(u[,"HSBC"])*sqrt(df_HSBC/(df_HSBC-2))
ks.test(t_HSBC, pt, df_HSBC)
t_CLP <- u[,"CLP"]/sd(u[,"CLP"])*sqrt(df_CLP/(df_CLP-2))
ks.test(t_CLP, pt, df_CLP)
t_CK <- u[,"CK"]/sd(u[,"CK"])*sqrt(df_CK/(df_CK-2))
ks.test(t_CK, pt, df_CK)
############################################################
n <- 180
u_180 <- tail(u, n)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
z_180 <- sweep(u_180, 2, mu_180)
d2_180 <- diag(z_180 %*% solve(S_180) %*% t(z_180))
sd2_180 <- sort(d2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,1))
qqplot(q, sd2_180, main="Chi2 Q-Q Plot")		# QQ-chisquare plot
qqline(sd2_180, distribution=function(p) qchisq(p, df=3))
ks.test(sd2_180, pchisq, 3)
n <- 180
u_180 <- tail(u, n)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
z_180 <- sweep(u_180, 2, mu_180)
d2_180 <- colSums((z_180 %*% solve(S_180)) * z_180)
sd2_180 <- sort(d2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,1))
qqplot(q, sd2_180, main="Chi2 Q-Q Plot")		# QQ-chisquare plot
qqline(sd2_180, distribution=function(p) qchisq(p, df=3))
ks.test(sd2_180, pchisq, 3)
(z_180 %*% solve(S_180)) * z_180
d2_180
d2_180 <- rowSums((z_180 %*% solve(S_180)) * z_180)
sd2_180 <- sort(d2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,1))
qqplot(q, sd2_180, main="Chi2 Q-Q Plot")		# QQ-chisquare plot
qqline(sd2_180, distribution=function(p) qchisq(p, df=3))
ks.test(sd2_180, pchisq, 3)
?acf
qnorm((1+0.95)/2)/sqrt(nrow(d))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
d <- read.csv("../Datasets/stock_1999_2002.csv", row.names=1) # read in data file
d <- as.ts(d)
returns <- (lag(d) - d)/d
colnames(returns) <- paste0(colnames(d), "_Return")
u1 <- returns[,"HSBC_Return"]
u2 <- returns[,"CLP_Return"]
u3 <- returns[,"CK_Return"]
n_sim <- 1e4
par(mfrow=c(1,3))
# Q-Q plot for empirical marginals
col <- c("blue", "orange", "green")
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
for (k in 1:ncol(returns)){
q <- quantile(returns[,k], probs=i, type=4, names=FALSE)
qqplot(q, sort(returns[,k]), col=col[k],
xlab="Empirical quantiles", ylab="Returns quantiles",
main=paste0(colnames(returns)[k], "'s return Q-Q Plot"))
abline(lsfit(q, sort(returns[,k])), lwd=2)
}
par(mfrow=c(1, 1))
library(copula)  # Package for copula computation
empirical_marginals <- function(x) pobs(x)
empirical_quantile <- function(p, samples){
q <- matrix(NA, nrow=nrow(p), ncol=ncol(p))
for (k in 1:ncol(p)){
q[,k] <- quantile(samples[,k], probs=p[,k], type=4, names=FALSE)
}
return (q)
}
# using empirical as the marginal distribution
emp_u <- empirical_marginals(returns)
################################################################################
# Assume a normal-copula with ncol(d)=3
# P2p: array of elements of upper triangular matrix
N.cop <- normalCopula(dim=ncol(d), dispstr="un")
fit <- fitCopula(N.cop, emp_u, "ml")
(rho <- coef(fit))
N.cop_fit <- normalCopula(rho, dim=ncol(d), dispstr="un")
set.seed(4002)
# Generate random samples u~U(0, 1) from the fitted gaussian copula
u_sim_N <- rCopula(n_sim, N.cop_fit)
colnames(u_sim_N) <- colnames(d)
pairs(u_sim_N[1:1e3,], col="blue")        # only show the first 1000
cor(u_sim_N)
cor(returns)
# Obtain returns based on empirical marginals
return_sim_N <- empirical_quantile(u_sim_N, returns)
colnames(return_sim_N) <- colnames(d)
pairs(return_sim_N[1:1e3,], col="green")  # only show the first 1000
################################################################################
Mahalanobis2 <- function(X){
mu <- apply(X, 2, mean)
inv_Sig <- solve(cov(X))
X_minus_mu <- sweep(X, 2, mu, FUN="-")
return (rowSums((X_minus_mu %*% inv_Sig) * X_minus_mu))
}
QQ_Plot <- function(sim_data, raw_data, col="blue"){
n_days <- length(raw_data)
i <- ((1:n_days) - 0.5) / n_days
q <- quantile(sim_data, probs=i, type=4, names=FALSE)
qqplot(q, sort(raw_data), col=col,
xlab="Empirical quantiles", ylab="Returns quantiles",
main="Squared Mahalanobis Q-Q Plot with empeirical marginals")
abline(lsfit(q, sort(raw_data)), lwd=2)
}
returns_md2 <- Mahalanobis2(returns)
################################################################################
sim_N_md2 <- Mahalanobis2(return_sim_N)
QQ_Plot(sim_N_md2, returns_md2, col="blue")
i <- ((1:n_days) - 0.5) / n_days
q <- qchisq(i, 3)
qqplot(q, sort(returns_md2), main="Chi2 Q-Q Plot")
abline(lsfit(q, sort(returns_md2)))
################################################################################
# Assume a t-copula  with ncol(d)=3
t.cop <- tCopula(dim=ncol(d), dispstr='un')
m <- pobs(returns)         # pseudo-observations
fit <- fitCopula(t.cop, m, "ml")
(rho <- coef(fit)[1:ncol(d)])
(df <- coef(fit)[length(coef(fit))])
t.cop_fit <- tCopula(dim=ncol(d), rho, df=df, dispstr="un")
# Generate random samples u~U(0, 1) from the fitted t copula
u_sim_t <- rCopula(n_sim, t.cop_fit)
colnames(u_sim_t) <- colnames(d)
pairs(u_sim_t[1:1e3,], col="blue")        # only show the first 1000
# Obtain returns based on empirical marginals
return_sim_t <- empirical_quantile(u_sim_t, returns)
colnames(return_sim_t) <- colnames(d)
pairs(return_sim_t[1:1e3,], col="green")  # only show the first 1000
################################################################################
sim_t_md2 <- Mahalanobis2(return_sim_t)
QQ_Plot(sim_t_md2, returns_md2, col="orange")
################################################################################
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
q_N <- quantile(sim_N_md2, probs=i, type=4, names=FALSE)
q_t <- quantile(sim_t_md2, probs=i, type=4, names=FALSE)
linear_N <- lsfit(q_N, sort(returns_md2))
linear_t <- lsfit(q_t, sort(returns_md2))
par(mfrow=c(1, 1))
# plot theoretical quantiles starting from 10
(idx_start <- min(which(q_N > 10), which(q_t > 10)))
plot(sort(linear_N$residuals^2)[idx_start:n_days], ylim=c(0, 25),
ylab="squared residuals", pch=1, cex=1.5)
points(sort(linear_t$residuals^2)[idx_start:n_days],
pch=4, cex=1.5, lwd=2)
legend("topleft", pch=c(1, 4), cex=1.5, lwd=c(1, 2),
legend=c("Gaussian copula", "Student's t-copula"), lty=0)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
d <- read.csv("../Datasets/stock_1999_2002.csv", row.names=1) # read in data file
d <- as.ts(d)
returns <- (lag(d) - d)/d
colnames(returns) <- paste0(colnames(d), "_Return")
u1 <- returns[,"HSBC_Return"]
u2 <- returns[,"CLP_Return"]
u3 <- returns[,"CK_Return"]
n_sim <- 1e5
par(mfrow=c(1,3))
# Q-Q plot for empirical marginals
col <- c("blue", "orange", "green")
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
for (k in 1:ncol(returns)){
q <- quantile(returns[,k], probs=i, type=4, names=FALSE)
qqplot(q, sort(returns[,k]), col=col[k],
xlab="Empirical quantiles", ylab="Returns quantiles",
main=paste0(colnames(returns)[k], "'s return Q-Q Plot"))
abline(lsfit(q, sort(returns[,k])), lwd=2)
}
par(mfrow=c(1, 1))
library(copula)  # Package for copula computation
empirical_marginals <- function(x) pobs(x)
empirical_quantile <- function(p, samples){
q <- matrix(NA, nrow=nrow(p), ncol=ncol(p))
for (k in 1:ncol(p)){
q[,k] <- quantile(samples[,k], probs=p[,k], type=4, names=FALSE)
}
return (q)
}
# using empirical as the marginal distribution
emp_u <- empirical_marginals(returns)
################################################################################
# Assume a normal-copula with ncol(d)=3
# P2p: array of elements of upper triangular matrix
N.cop <- normalCopula(dim=ncol(d), dispstr="un")
fit <- fitCopula(N.cop, emp_u, "ml")
(rho <- coef(fit))
N.cop_fit <- normalCopula(rho, dim=ncol(d), dispstr="un")
set.seed(4002)
# Generate random samples u~U(0, 1) from the fitted gaussian copula
u_sim_N <- rCopula(n_sim, N.cop_fit)
colnames(u_sim_N) <- colnames(d)
pairs(u_sim_N[1:1e3,], col="blue")        # only show the first 1000
cor(u_sim_N)
cor(returns)
# Obtain returns based on empirical marginals
return_sim_N <- empirical_quantile(u_sim_N, returns)
colnames(return_sim_N) <- colnames(d)
pairs(return_sim_N[1:1e3,], col="green")  # only show the first 1000
################################################################################
Mahalanobis2 <- function(X){
mu <- apply(X, 2, mean)
inv_Sig <- solve(cov(X))
X_minus_mu <- sweep(X, 2, mu, FUN="-")
return (rowSums((X_minus_mu %*% inv_Sig) * X_minus_mu))
}
QQ_Plot <- function(sim_data, raw_data, col="blue"){
n_days <- length(raw_data)
i <- ((1:n_days) - 0.5) / n_days
q <- quantile(sim_data, probs=i, type=4, names=FALSE)
qqplot(q, sort(raw_data), col=col,
xlab="Empirical quantiles", ylab="Returns quantiles",
main="Squared Mahalanobis Q-Q Plot with empeirical marginals")
abline(lsfit(q, sort(raw_data)), lwd=2)
}
returns_md2 <- Mahalanobis2(returns)
################################################################################
sim_N_md2 <- Mahalanobis2(return_sim_N)
QQ_Plot(sim_N_md2, returns_md2, col="blue")
i <- ((1:n_days) - 0.5) / n_days
q <- qchisq(i, 3)
qqplot(q, sort(returns_md2), main="Chi2 Q-Q Plot")
abline(lsfit(q, sort(returns_md2)))
################################################################################
# Assume a t-copula  with ncol(d)=3
t.cop <- tCopula(dim=ncol(d), dispstr='un')
m <- pobs(returns)         # pseudo-observations
fit <- fitCopula(t.cop, m, "ml")
(rho <- coef(fit)[1:ncol(d)])
(df <- coef(fit)[length(coef(fit))])
t.cop_fit <- tCopula(dim=ncol(d), rho, df=df, dispstr="un")
# Generate random samples u~U(0, 1) from the fitted t copula
u_sim_t <- rCopula(n_sim, t.cop_fit)
colnames(u_sim_t) <- colnames(d)
pairs(u_sim_t[1:1e3,], col="blue")        # only show the first 1000
# Obtain returns based on empirical marginals
return_sim_t <- empirical_quantile(u_sim_t, returns)
colnames(return_sim_t) <- colnames(d)
pairs(return_sim_t[1:1e3,], col="green")  # only show the first 1000
################################################################################
sim_t_md2 <- Mahalanobis2(return_sim_t)
QQ_Plot(sim_t_md2, returns_md2, col="orange")
################################################################################
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
q_N <- quantile(sim_N_md2, probs=i, type=4, names=FALSE)
q_t <- quantile(sim_t_md2, probs=i, type=4, names=FALSE)
linear_N <- lsfit(q_N, sort(returns_md2))
linear_t <- lsfit(q_t, sort(returns_md2))
par(mfrow=c(1, 1))
# plot theoretical quantiles starting from 10
(idx_start <- min(which(q_N > 10), which(q_t > 10)))
plot(sort(linear_N$residuals^2)[idx_start:n_days], ylim=c(0, 25),
ylab="squared residuals", pch=1, cex=1.5)
points(sort(linear_t$residuals^2)[idx_start:n_days],
pch=4, cex=1.5, lwd=2)
legend("topleft", pch=c(1, 4), cex=1.5, lwd=c(1, 2),
legend=c("Gaussian copula", "Student's t-copula"), lty=0)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
d <- read.csv("../Datasets/stock_1999_2002.csv", row.names=1) # read in data file
d <- as.ts(d)
returns <- (lag(d) - d)/d
colnames(returns) <- paste0(colnames(d), "_Return")
u1 <- returns[,"HSBC_Return"]
u2 <- returns[,"CLP_Return"]
u3 <- returns[,"CK_Return"]
n_sim <- 1e4
par(mfrow=c(1,3))
# Q-Q plot for empirical marginals
col <- c("blue", "orange", "green")
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
for (k in 1:ncol(returns)){
q <- quantile(returns[,k], probs=i, type=4, names=FALSE)
qqplot(q, sort(returns[,k]), col=col[k],
xlab="Empirical quantiles", ylab="Returns quantiles",
main=paste0(colnames(returns)[k], "'s return Q-Q Plot"))
abline(lsfit(q, sort(returns[,k])), lwd=2)
}
par(mfrow=c(1, 1))
library(copula)  # Package for copula computation
empirical_marginals <- function(x) pobs(x)
empirical_quantile <- function(p, samples){
q <- matrix(NA, nrow=nrow(p), ncol=ncol(p))
for (k in 1:ncol(p)){
q[,k] <- quantile(samples[,k], probs=p[,k], type=4, names=FALSE)
}
return (q)
}
# using empirical as the marginal distribution
emp_u <- empirical_marginals(returns)
################################################################################
# Assume a normal-copula with ncol(d)=3
# P2p: array of elements of upper triangular matrix
N.cop <- normalCopula(dim=ncol(d), dispstr="un")
fit <- fitCopula(N.cop, emp_u, "ml")
(rho <- coef(fit))
N.cop_fit <- normalCopula(rho, dim=ncol(d), dispstr="un")
set.seed(4002)
# Generate random samples u~U(0, 1) from the fitted gaussian copula
u_sim_N <- rCopula(n_sim, N.cop_fit)
colnames(u_sim_N) <- colnames(d)
pairs(u_sim_N[1:1e3,], col="blue")        # only show the first 1000
cor(u_sim_N)
cor(returns)
# Obtain returns based on empirical marginals
return_sim_N <- empirical_quantile(u_sim_N, returns)
colnames(return_sim_N) <- colnames(d)
pairs(return_sim_N[1:1e3,], col="green")  # only show the first 1000
################################################################################
Mahalanobis2 <- function(X){
mu <- apply(X, 2, mean)
inv_Sig <- solve(cov(X))
X_minus_mu <- sweep(X, 2, mu, FUN="-")
return (rowSums((X_minus_mu %*% inv_Sig) * X_minus_mu))
}
QQ_Plot <- function(sim_data, raw_data, col="blue"){
n_days <- length(raw_data)
i <- ((1:n_days) - 0.5) / n_days
q <- quantile(sim_data, probs=i, type=4, names=FALSE)
qqplot(q, sort(raw_data), col=col,
xlab="Empirical quantiles", ylab="Returns quantiles",
main="Squared Mahalanobis Q-Q Plot with empeirical marginals")
abline(lsfit(q, sort(raw_data)), lwd=2)
}
returns_md2 <- Mahalanobis2(returns)
################################################################################
sim_N_md2 <- Mahalanobis2(return_sim_N)
QQ_Plot(sim_N_md2, returns_md2, col="blue")
i <- ((1:n_days) - 0.5) / n_days
q <- qchisq(i, 3)
qqplot(q, sort(returns_md2), main="Chi2 Q-Q Plot")
abline(lsfit(q, sort(returns_md2)))
################################################################################
# Assume a t-copula  with ncol(d)=3
t.cop <- tCopula(dim=ncol(d), dispstr='un')
m <- pobs(returns)         # pseudo-observations
fit <- fitCopula(t.cop, m, "ml")
(rho <- coef(fit)[1:ncol(d)])
(df <- coef(fit)[length(coef(fit))])
t.cop_fit <- tCopula(dim=ncol(d), rho, df=df, dispstr="un")
# Generate random samples u~U(0, 1) from the fitted t copula
u_sim_t <- rCopula(n_sim, t.cop_fit)
colnames(u_sim_t) <- colnames(d)
pairs(u_sim_t[1:1e3,], col="blue")        # only show the first 1000
# Obtain returns based on empirical marginals
return_sim_t <- empirical_quantile(u_sim_t, returns)
colnames(return_sim_t) <- colnames(d)
pairs(return_sim_t[1:1e3,], col="green")  # only show the first 1000
################################################################################
sim_t_md2 <- Mahalanobis2(return_sim_t)
QQ_Plot(sim_t_md2, returns_md2, col="orange")
################################################################################
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
q_N <- quantile(sim_N_md2, probs=i, type=4, names=FALSE)
q_t <- quantile(sim_t_md2, probs=i, type=4, names=FALSE)
linear_N <- lsfit(q_N, sort(returns_md2))
linear_t <- lsfit(q_t, sort(returns_md2))
par(mfrow=c(1, 1))
# plot theoretical quantiles starting from 10
(idx_start <- min(which(q_N > 10), which(q_t > 10)))
plot(sort(linear_N$residuals^2)[idx_start:n_days], ylim=c(0, 25),
ylab="squared residuals", pch=1, cex=1.5)
points(sort(linear_t$residuals^2)[idx_start:n_days],
pch=4, cex=1.5, lwd=2)
legend("topleft", pch=c(1, 4), cex=1.5, lwd=c(1, 2),
legend=c("Gaussian copula", "Student's t-copula"), lty=0)
################################################################################
d <- read.csv("../Datasets/stock_1999_2002.csv", row.names=1) # read in data file
d <- as.ts(d)
returns <- (lag(d) - d)/d
colnames(returns) <- paste0(colnames(d), "_Return")
u1 <- returns[,"HSBC_Return"]
u2 <- returns[,"CLP_Return"]
u3 <- returns[,"CK_Return"]
n_sim <- 1e5
par(mfrow=c(1,3))
# Q-Q plot for empirical marginals
col <- c("blue", "orange", "green")
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
for (k in 1:ncol(returns)){
q <- quantile(returns[,k], probs=i, type=4, names=FALSE)
qqplot(q, sort(returns[,k]), col=col[k],
xlab="Empirical quantiles", ylab="Returns quantiles",
main=paste0(colnames(returns)[k], "'s return Q-Q Plot"))
abline(lsfit(q, sort(returns[,k])), lwd=2)
}
par(mfrow=c(1, 1))
library(copula)  # Package for copula computation
empirical_marginals <- function(x) pobs(x)
empirical_quantile <- function(p, samples){
q <- matrix(NA, nrow=nrow(p), ncol=ncol(p))
for (k in 1:ncol(p)){
q[,k] <- quantile(samples[,k], probs=p[,k], type=4, names=FALSE)
}
return (q)
}
# using empirical as the marginal distribution
emp_u <- empirical_marginals(returns)
################################################################################
# Assume a normal-copula with ncol(d)=3
# P2p: array of elements of upper triangular matrix
N.cop <- normalCopula(dim=ncol(d), dispstr="un")
fit <- fitCopula(N.cop, emp_u, "ml")
(rho <- coef(fit))
N.cop_fit <- normalCopula(rho, dim=ncol(d), dispstr="un")
set.seed(4002)
# Generate random samples u~U(0, 1) from the fitted gaussian copula
u_sim_N <- rCopula(n_sim, N.cop_fit)
colnames(u_sim_N) <- colnames(d)
pairs(u_sim_N[1:1e3,], col="blue")        # only show the first 1000
cor(u_sim_N)
cor(returns)
# Obtain returns based on empirical marginals
return_sim_N <- empirical_quantile(u_sim_N, returns)
colnames(return_sim_N) <- colnames(d)
pairs(return_sim_N[1:1e3,], col="green")  # only show the first 1000
################################################################################
Mahalanobis2 <- function(X){
mu <- apply(X, 2, mean)
inv_Sig <- solve(cov(X))
X_minus_mu <- sweep(X, 2, mu, FUN="-")
return (rowSums((X_minus_mu %*% inv_Sig) * X_minus_mu))
}
QQ_Plot <- function(sim_data, raw_data, col="blue"){
n_days <- length(raw_data)
i <- ((1:n_days) - 0.5) / n_days
q <- quantile(sim_data, probs=i, type=4, names=FALSE)
qqplot(q, sort(raw_data), col=col,
xlab="Empirical quantiles", ylab="Returns quantiles",
main="Squared Mahalanobis Q-Q Plot with empeirical marginals")
abline(lsfit(q, sort(raw_data)), lwd=2)
}
returns_md2 <- Mahalanobis2(returns)
################################################################################
sim_N_md2 <- Mahalanobis2(return_sim_N)
QQ_Plot(sim_N_md2, returns_md2, col="blue")
i <- ((1:n_days) - 0.5) / n_days
q <- qchisq(i, 3)
qqplot(q, sort(returns_md2), main="Chi2 Q-Q Plot")
abline(lsfit(q, sort(returns_md2)))
################################################################################
# Assume a t-copula  with ncol(d)=3
t.cop <- tCopula(dim=ncol(d), dispstr='un')
m <- pobs(returns)         # pseudo-observations
fit <- fitCopula(t.cop, m, "ml")
(rho <- coef(fit)[1:ncol(d)])
(df <- coef(fit)[length(coef(fit))])
t.cop_fit <- tCopula(dim=ncol(d), rho, df=df, dispstr="un")
# Generate random samples u~U(0, 1) from the fitted t copula
u_sim_t <- rCopula(n_sim, t.cop_fit)
colnames(u_sim_t) <- colnames(d)
pairs(u_sim_t[1:1e3,], col="blue")        # only show the first 1000
# Obtain returns based on empirical marginals
return_sim_t <- empirical_quantile(u_sim_t, returns)
colnames(return_sim_t) <- colnames(d)
pairs(return_sim_t[1:1e3,], col="green")  # only show the first 1000
################################################################################
sim_t_md2 <- Mahalanobis2(return_sim_t)
QQ_Plot(sim_t_md2, returns_md2, col="orange")
################################################################################
n_days <- nrow(returns)
i <- ((1:n_days) - 0.5) / n_days
q_N <- quantile(sim_N_md2, probs=i, type=4, names=FALSE)
q_t <- quantile(sim_t_md2, probs=i, type=4, names=FALSE)
linear_N <- lsfit(q_N, sort(returns_md2))
linear_t <- lsfit(q_t, sort(returns_md2))
par(mfrow=c(1, 1))
# plot theoretical quantiles starting from 10
(idx_start <- min(which(q_N > 10), which(q_t > 10)))
plot(sort(linear_N$residuals^2)[idx_start:n_days], ylim=c(0, 25),
ylab="squared residuals", pch=1, cex=1.5)
points(sort(linear_t$residuals^2)[idx_start:n_days],
pch=4, cex=1.5, lwd=2)
legend("topleft", pch=c(1, 4), cex=1.5, lwd=c(1, 2),
legend=c("Gaussian copula", "Student's t-copula"), lty=0)
