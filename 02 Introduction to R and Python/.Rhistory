################################################################################
### Finite Difference ###
################################################################################
# Initialize variables
S_0 <- 10; K <- 8; r <- 0.05; sigma <- 0.3; T <- 1
Sim_greek <- function(h_d, h_v, n, M, S_0, K, r, sigma, T,
theta, seed=4002){
delta_t <- T / M
Milstein <- function(z, S_t, r, sigma){
(S_t*(1 + r*delta_t) + sigma*S_t^(theta/2)*sqrt(delta_t)*z +
sigma^2*theta/2*S_t^(theta-1)*delta_t/2*(z^2-1))
}
Euro_call <- function(S_t, K, r, sigma, T){
set.seed(seed)
for (m in 1:M){
z <- rnorm(n)
S_t <- Milstein(z, S_t, r, sigma)
}
mean(exp(-r*T) * pmax(S_t - K, 0))
}
Y <- Euro_call(S_0, K, r, sigma, T)
# Estimate delta using forward and central difference method
Y_S0_neg <- Euro_call(S_0-h_d, K, r, sigma, T)
Y_S0_pos <- Euro_call(S_0+h_d, K, r, sigma, T)
# Estimate vega using forward and central difference method
Y_sig_neg <- Euro_call(S_0, K, r, sigma-h_v, T)
Y_sig_pos <- Euro_call(S_0, K, r, sigma+h_v, T)
list(delta=list(forward=(Y_S0_pos - Y)/h_d,
central=(Y_S0_pos - Y_S0_neg)/(2*h_d)),
vega=list(forward=(Y_sig_pos - Y)/h_v,
central=(Y_sig_pos - Y_sig_neg)/(2*h_v)))
}
################################################################################
# Compute the exact delta and vega for theta=2 (BS)
d_plus <- (log(S_0/K) + (r+sigma^2/2)*T) / (sigma*sqrt(T))
(exact_delta <- pnorm(d_plus))
(exact_vega <- S_0 * sqrt(T) * dnorm(d_plus))
h_delta <- seq(0.5, 0.05, by=-0.05); h_vega <- seq(0.05, 0.005, by=-0.005)
n <- 1e5; M <- 1e3
theta_lst <- c(2, 1, 1.8)
for (theta in theta_lst){
results_delta <- data.frame(h=h_delta, theta=theta,
delta_forward=0, delta_central=0)
results_vega <- data.frame(h=h_vega, theta=theta,
vega_forward=0, vega_central=0)
prog_bar <- txtProgressBar(min=0, max=length(h_delta), width=50, style=3)
for (i in 1:length(h_delta)) {
h_d <- h_delta[i]; h_v <- h_vega[i]
Euro_CEV <- Sim_greek(h_d, h_v, n, M, S_0, K, r, sigma, T,
theta=theta)
results_delta$delta_forward[i] <- Euro_CEV$delta$forward
results_delta$delta_central[i] <- Euro_CEV$delta$central
results_vega$vega_forward[i] <- Euro_CEV$vega$forward
results_vega$vega_central[i] <- Euro_CEV$vega$central
setTxtProgressBar(prog_bar, i)
}
cat("\n")
print(results_delta)
print(results_vega)
}
h_delta <- seq(0.5, 0.05, by=-0.05); h_vega <- seq(0.05, 0.005, by=-0.005)
n <- 1e5; M <- 1e4
theta_lst <- c(2, 1, 1.8)
for (theta in theta_lst){
results_delta <- data.frame(h=h_delta, theta=theta,
delta_forward=0, delta_central=0)
results_vega <- data.frame(h=h_vega, theta=theta,
vega_forward=0, vega_central=0)
prog_bar <- txtProgressBar(min=0, max=length(h_delta), width=50, style=3)
for (i in 1:length(h_delta)) {
h_d <- h_delta[i]; h_v <- h_vega[i]
Euro_CEV <- Sim_greek(h_d, h_v, n, M, S_0, K, r, sigma, T,
theta=theta)
results_delta$delta_forward[i] <- Euro_CEV$delta$forward
results_delta$delta_central[i] <- Euro_CEV$delta$central
results_vega$vega_forward[i] <- Euro_CEV$vega$forward
results_vega$vega_central[i] <- Euro_CEV$vega$central
setTxtProgressBar(prog_bar, i)
}
cat("\n")
print(results_delta)
print(results_vega)
}
install.packages("R.utils")
# try several values of K, choose K so that stat. is maximized
kmstat <- function(X, K){
km <- kmeans(X, K)              # K-means clustering
ng <- km$size                   # size of each cluster
n <- nrow(X)                    # sample size
wcss <- sum(km$withinss)        # within group ss
bcss <- km$betweenss            # between group ss
# km$cluster: the cluster to which each point is allocated
out <- list((n-K)*bcss/((K-1)*wcss), ng, km$cluster)
names(out) <- c("stat", "size", "cluster")
return(out)
}
################################################################################
# Try kmeans(X, K) several times and output the best trial
km <- function(X, K, trial=5) {
res0 <- kmstat(X, K)            # result of the first trial
r0 <- res0$stat                 # stat from the first trial
for (i in 2:trial) {
res <- kmstat(X, K)           # new trial
if (res$stat > r0) {          # update r0 & res if it is better
r0 <- res$stat
res0 <- res
}
}
cat("cluster size=", res0$size, "\n") # cluster size
cat("stat=", res0$stat, "\n")         # display stat
return(res0$cluster)                  # cluster label
}
for (K in 2:25){
print(K)
km(X_train, K)
}
library(keras)        # MNIST dataset
library(nnet)
# Load MNIST dataset
mnist <- dataset_mnist()
X_train <- mnist$train$x
y_train <- mnist$train$y
X_test <- mnist$test$x
y_test <- mnist$test$y
X_train <- matrix(X_train, nrow=length(y_train))
X_test <- matrix(X_test, nrow=length(y_test))
for (K in 2:25){
print(K)
km(X_train, K)
}
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
library(keras)        # MNIST dataset
library(nnet)
source("KMeansCluster.R")
best_km
best_km()
source("KMeansCluster.R")
library(class)          # k-NN library in R
?knn
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
### HSI ###
################################################################################
df_HSI <- read.csv("../Datasets/fin-ratio.csv")    # read in HSI dataset
X_HSI <- df_HSI[,-7]              # remove HSI label
plot(X_HSI, col=df_HSI[,7]+1)     # plot observations with color
set.seed(4002)
km_HSI <- kmeans(X_HSI, 2)        # K-means clustering with K=2
names(km_HSI)
km_HSI$betweenss                  # between group sum of squares
km_HSI$withinss                   # within group sum of squares
table(df_HSI[,7], km_HSI$cluster) # Classification table
################################################################################
### iris flower ###
################################################################################
X_iris <- iris[,-5]
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
X1 <- X_iris[km_iris$cluster==1,] # select group by cluster label
X2 <- X_iris[km_iris$cluster==2,]
X3 <- X_iris[km_iris$cluster==3,]
(n1 <- nrow(X1)); (n2 <- nrow(X2)); (n3 <- nrow(X3))  # cluster size
apply(X1, 2, mean)                # cluster mean
apply(X2, 2, mean)
apply(X3, 2, mean)
sum(diag((n1-1)*var(X1)))         # tr(SSCP)
sum(diag((n2-1)*var(X2)))         # within group sum of squares
sum(diag((n3-1)*var(X3)))
m <- apply(X_iris, 2, mean)       # overall mean
# (group mean - overall mean)^2
dm <- sweep(km_iris$centers, 2, m, FUN="-")^2
sum(km_iris$size*rowSums(dm))     # between group sum of squares
df_iris <- read.csv("iris.csv")		# read in data
df_iris <- read.csv("../Datasets/iris.csv")		# read in data
X_iris <- iris[,-5]               # remove species label
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
X1 <- X_iris[km_iris$cluster==1,] # select group by cluster label
X2 <- X_iris[km_iris$cluster==2,]
X3 <- X_iris[km_iris$cluster==3,]
(n1 <- nrow(X1)); (n2 <- nrow(X2)); (n3 <- nrow(X3))  # cluster size
apply(X1, 2, mean)                # cluster mean
apply(X2, 2, mean)
apply(X3, 2, mean)
sum(diag((n1-1)*var(X1)))         # tr(SSCP)
sum(diag((n2-1)*var(X2)))         # within group sum of squares
sum(diag((n3-1)*var(X3)))
m <- apply(X_iris, 2, mean)       # overall mean
# (group mean - overall mean)^2
dm <- sweep(km_iris$centers, 2, m, FUN="-")^2
sum(km_iris$size*rowSums(dm))     # between group sum of squares
iris
X_iris
X_iris <- iris[,-5]               # remove species label
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
X1 <- X_iris[km_iris$cluster==1,] # select group by cluster label
X2 <- X_iris[km_iris$cluster==2,]
X3 <- X_iris[km_iris$cluster==3,]
(n1 <- nrow(X1)); (n2 <- nrow(X2)); (n3 <- nrow(X3))  # cluster size
apply(X1, 2, mean)                # cluster mean
apply(X2, 2, mean)
apply(X3, 2, mean)
sum(diag((n1-1)*var(X1)))         # tr(SSCP)
sum(diag((n2-1)*var(X2)))         # within group sum of squares
sum(diag((n3-1)*var(X3)))
m <- apply(X_iris, 2, mean)       # overall mean
# (group mean - overall mean)^2
dm <- sweep(km_iris$centers, 2, m, FUN="-")^2
sum(km_iris$size*rowSums(dm))     # between group sum of squares
X_iris <- iris[,-5]               # remove species label
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
X1 <- X_iris[km_iris$cluster==1,] # select group by cluster label
X2 <- X_iris[km_iris$cluster==2,]
X3 <- X_iris[km_iris$cluster==3,]
(n1 <- nrow(X1)); (n2 <- nrow(X2)); (n3 <- nrow(X3))  # cluster size
apply(X1, 2, mean)                # cluster mean
apply(X2, 2, mean)
apply(X3, 2, mean)
sum(diag((n1-1)*var(X1)))         # tr(SSCP)
sum(diag((n2-1)*var(X2)))         # within group sum of squares
sum(diag((n3-1)*var(X3)))
m <- apply(X_iris, 2, mean)       # overall mean
# (group mean - overall mean)^2
dm <- sweep(km_iris$centers, 2, m, FUN="-")^2
sum(km_iris$size*rowSums(dm))     # between group sum of squares
km_iris$betweenss		              # between group ss
source("KMeansCluster.R")
km_iris2 <- best_km(X_iris, 2)        # try K=2
km_iris3 <- best_km(X_iris, 3)        # try K=3
km_iris4 <- best_km(X_iris, 4)        # try K=4
km_iris5 <- best_km(X_iris, 5)        # try K=5
################################################################################
table(iris[,5], km_iris3$cluster)     # classification table
par(mfrow=c(2,3))                     # 2x3 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_iris)){
boxplot(X_iris[,i]~km_iris3$cluster,
xlab="species", ylab=names(X_iris)[i])
}
par(mfrow=c(1,4))                     # 1x4 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_iris)){
boxplot(X_iris[,i]~km_iris3$cluster,
xlab="species", ylab=names(X_iris)[i])
}
X_iris <- iris[,-5]                   # remove species label
plot(X_iris, col=iris[,5])            # pairplot with color
X_iris <- iris[,-5]                   # remove species label
plot(X_iris, col=iris[,5])            # pairplot with color
(km_iris <- kmeans(X_iris, 3))        # K-means clustering with K=3
km_iris$betweenss		                  # between group ss
km_iris$tot.withinss                  # within group ss
km_iris$tot.withinss                  # total within group ss
km_iris$betweenss		                  # between group ss
X1 <- X_iris[km_iris$cluster==1,]     # select group by cluster label
X2 <- X_iris[km_iris$cluster==2,]
X3 <- X_iris[km_iris$cluster==3,]
(n1 <- nrow(X1)); (n2 <- nrow(X2)); (n3 <- nrow(X3))  # cluster size
apply(X1, 2, mean)                    # cluster mean
apply(X2, 2, mean)
apply(X3, 2, mean)
(wgss1 <- sum(diag((n1-1)*var(X1))))  # within group ss
(wgss2 <- sum(diag((n2-1)*var(X2))))
(wgss3 <- sum(diag((n3-1)*var(X3))))
wgss1 + wgss2 + wgss3                 # total within group ss
m <- apply(X_iris, 2, mean)           # overall mean
# (group mean - overall mean)^2
dm <- sweep(km_iris$centers, 2, m, FUN="-")^2
sum(km_iris$size*rowSums(dm))         # between group ss
(c1 <- apply(X1, 2, mean))            # cluster mean
(c2 <- apply(X2, 2, mean))
(c3 <- apply(X3, 2, mean))
cbind(c1, c2, c3)
km_iris$centers
rbind(c1, c2, c3)
m <- apply(X_iris, 2, mean)           # overall mean
# (group mean - overall mean)^2
dm <- sweep(rbind(c1, c2, c3), 2, m, FUN="-")^2
sum(km_iris$size*rowSums(dm))         # between group ss
?tr
?trace
tr <- function(x) sum(diag(x))
(wgss1 <- tr((n1-1)*var(X1)))         # within group ss
(wgss2 <- tr((n2-1)*var(X2)))         # within group ss
(wgss3 <- tr((n3-1)*var(X3)))         # within group ss
sum(c(n1, n2, n3)*rowSums(dm))        # between group ss
# Try several values of K, choose K so that stat. is maximized
kmstat <- function(X, K){
km <- kmeans(X, K)              # K-means clustering
n <- nrow(X)                    # sample size
wcss <- sum(km$withinss)        # within group ss
bcss <- km$betweenss            # between group ss
# km$cluster: the cluster to which each point is allocated
list(stat=(n-K)*bcss/((K-1)*wcss), km=km)
}
# Try kmeans(X, K) several times and output the best trial
best_km <- function(X, K, trial=5, seed=4002) {
set.seed(seed)
r0 <- 0
for (i in 1:trial) {
res <- kmstat(X, K)           # new trial
if (res$stat > r0) {          # update r0 if it is less than r
r0 <- res$stat; km0 <- res$km
}
}
print(paste0("K=", K, "; stat=", r0))
km0                             # best cluster
}
# Try several values of K, choose K so that stat. is maximized
kmstat <- function(X, K){
km <- kmeans(X, K)              # K-means clustering
n <- nrow(X)                    # sample size
totwgss <- sum(km$withinss)     # total within group ss
bgss <- km$betweenss            # between group ss
list(stat=(n-K)*bcss/((K-1)*totwgss), km=km)
}
# Try kmeans(X, K) several times and output the best trial
best_km <- function(X, K, trial=5, seed=4002) {
set.seed(seed)
r0 <- 0
for (i in 1:trial) {
res <- kmstat(X, K)           # new trial
if (res$stat > r0) {          # update r0 if it is less than r
r0 <- res$stat; km0 <- res$km
}
}
print(paste0("K=", K, "; stat=", r0))
km0                             # best cluster
}
km_iris$tot.withinss
# Try several values of K, choose K so that stat. is maximized
kmstat <- function(X, K){
km <- kmeans(X, K)              # K-means clustering
n <- nrow(X)                    # sample size
totwgss <- km$tot.withinss      # total within group ss
bgss <- km$betweenss            # between group ss
list(stat=(n-K)*bcss/((K-1)*totwgss), km=km)
}
# Try kmeans(X, K) several times and output the best trial
best_km <- function(X, K, trial=5, seed=4002) {
set.seed(seed)
r0 <- 0
for (i in 1:trial) {
res <- kmstat(X, K)           # new trial
if (res$stat > r0) {          # update r0 if it is less than r
r0 <- res$stat; km0 <- res$km
}
}
print(paste0("K=", K, "; stat=", r0))
km0                             # best cluster
}
source("KMeansCluster.R")             # read in best_km() function
km_iris2 <- best_km(X_iris, 2)        # try K=2
source("KMeansCluster.R")             # read in best_km() function
km_iris2 <- best_km(X_iris, 2)        # try K=2
km_iris3 <- best_km(X_iris, 3)        # try K=3
km_iris4 <- best_km(X_iris, 4)        # try K=4
km_iris5 <- best_km(X_iris, 5)        # try K=5
table(iris[,5], km_iris3$cluster)     # classification table
par(mfrow=c(1,4))                     # 1x4 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_iris)){
boxplot(X_iris[,i]~km_iris3$cluster,
xlab="species", ylab=names(X_iris)[i])
}
source("KMeansCluster.R")             # read in best_km() function
km_iris2 <- best_km(X_iris, 2)        # try K=2
km_iris3 <- best_km(X_iris, 3)        # try K=3
km_iris4 <- best_km(X_iris, 4)        # try K=4
km_iris5 <- best_km(X_iris, 5)        # try K=5
################################################################################
table(iris[,5], km_iris3$cluster)     # classification table
par(mfrow=c(1,4))                     # 1x4 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_iris)){
boxplot(X_iris[,i]~km_iris3$cluster,
xlab="species", ylab=names(X_iris)[i])
}
?ptukey
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
SPX <- read.csv("../Datasets/SPX.csv", header=TRUE, row.names=1)
HSI <- read.csv("../Datasets/HSI.csv", header=TRUE, row.names=1)
FTSE <- read.csv("../Datasets/FTSE.csv", header=TRUE, row.names=1)
SPX$Year <- format(as.Date(rownames(SPX), format="%d/%m/%Y"), "%Y")
HSI$Year <- format(as.Date(rownames(HSI), format="%d/%m/%Y"), "%Y")
FTSE$Year <- format(as.Date(rownames(FTSE), format="%d/%m/%Y"), "%Y")
SPX$log_return <- c(NA, diff(log(SPX$Price)))
HSI$log_return <- c(NA, diff(log(HSI$Price)))
FTSE$log_return <- c(NA, diff(log(FTSE$Price)))
# Remove first day of data for log return
SPX <- SPX[-1,]
HSI <- HSI[-1,]
FTSE <- FTSE[-1,]
Remove_Outlier <- function(index, outlier_factor=1.5){
q25 <- quantile(index$log_return, probs=.25, na.rm=FALSE)
q75 <- quantile(index$log_return, probs=.75, na.rm=FALSE)
iqr <- q75 - q25  #Inter-quartile range
lower_bound <- q25 - outlier_factor*iqr
upper_bound <- q75 + outlier_factor*iqr
pos <- index$log_return > lower_bound & index$log_return < upper_bound
return (index[pos,])
}
# Hyperparameter
outlier_removal <- TRUE
if (outlier_removal){
SPX <- Remove_Outlier(SPX)
HSI <- Remove_Outlier(HSI)
FTSE <- Remove_Outlier(FTSE)
}
################################################################################
### from 2005 to 2007 ###
################################################################################
start_year <- 2005
end_year <- 2007
year_name <- paste0(" Year: ", start_year, "-", end_year)
Chosen_Year <- start_year:end_year
Chosen_SPX <- SPX[SPX$Year %in% Chosen_Year,]
Chosen_HSI <- HSI[HSI$Year %in% Chosen_Year,]
Chosen_FTSE <- FTSE[FTSE$Year %in% Chosen_Year,]
par(mfrow=c(1,3))
hist(Chosen_SPX$log_return, breaks=20, xlab="SPX", cex.lab=1.5, cex.axis=1.5,
cex.main=1.5, main=paste0("SPX daily log-return.", year_name))
hist(Chosen_HSI$log_return, breaks=20, xlab="HSI", cex.lab=1.5, cex.axis=1.5,
cex.main=1.5, main=paste0("HSI daily log-return.", year_name))
hist(Chosen_FTSE$log_return, breaks=20, xlab="FTSE", cex.lab=1.5, cex.axis=1.5,
cex.main=1.5, main=paste0("FTSE daily log-return.", year_name))
################################################################################
par(mfrow=c(1,3))
boxplot(Chosen_SPX$log_return, Chosen_HSI$log_return, Chosen_FTSE$log_return,
names=c("SPX", "HSI", "FTSE"), xlab="Index", ylab="Daily log-return",
frame=FALSE, col=c("#00AFBB", "#E7B800", "#FC4E07"), boxwex=0.75,
main=paste0("Boxplot.", year_name))
Chosen_SPX$Index <- "SPX"
Chosen_HSI$Index <- "HSI"
Chosen_FTSE$Index <- "FTSE"
AllIndex <- rbind(Chosen_SPX, Chosen_HSI, Chosen_FTSE)
AllIndex$Index <- factor(AllIndex$Index, c("SPX", "HSI", "FTSE"))
library("gplots")
plotmeans(log_return~Index, data=AllIndex, xlab="Index", ylab="Daily log-return",
main=paste0("Mean Plot with 95% CI.", year_name))
anova.test <- aov(log_return~Index, data=AllIndex)
summary(anova.test)
# Reject the null hypothesis?
summary(anova.test)[[1]][[1, "Pr(>F)"]] < 0.05
(tukey.test <- TukeyHSD(anova.test))
plot(tukey.test)
mu_SPX <- mean(Chosen_SPX$log_return)
mu_HSI <- mean(Chosen_HSI$log_return)
mu_FTSE <- mean(Chosen_FTSE$log_return)
SSE_SPX <- sum((Chosen_SPX$log_return - mu_SPX)^2)
SSE_HSI <- sum((Chosen_HSI$log_return - mu_HSI)^2)
SSE_FTSE <- sum((Chosen_FTSE$log_return - mu_FTSE)^2)
n_SPX <- length(Chosen_SPX$log_return)
n_HSI <- length(Chosen_HSI$log_return)
n_FTSE <- length(Chosen_FTSE$log_return)
(df <- length(AllIndex$log_return) - 3)
(Within_group_MSE <- (SSE_SPX + SSE_HSI + SSE_FTSE) / df)
# Harmonic mean used for the two sample sizes
SPX_HSI_SE_ANOVA <- sqrt(Within_group_MSE / (2/(1/n_SPX + 1/n_HSI)))
FTSE_SPX_SE_ANOVA <- sqrt(Within_group_MSE / (2/(1/n_FTSE + 1/n_SPX)))
FTSE_HSI_SE_ANOVA <- sqrt(Within_group_MSE / (2/(1/n_FTSE + 1/n_HSI)))
SPX_vs_HSI <- abs(mu_SPX - mu_HSI) / SPX_HSI_SE_ANOVA
FTSE_vs_SPX <- abs(mu_FTSE - mu_SPX) / FTSE_SPX_SE_ANOVA
FTSE_vs_HSI <- abs(mu_FTSE - mu_HSI) / FTSE_HSI_SE_ANOVA
ptukey(q=SPX_vs_HSI, nmeans=3, df=df, lower.tail=TRUE)
ptukey(q=FTSE_vs_SPX, nmeans=3, df=df, lower.tail=TRUE)
ptukey(q=FTSE_vs_HSI, nmeans=3, df=df, lower.tail=TRUE)
1 - ptukey(q=SPX_vs_HSI, nmeans=3, df=df)
1 - ptukey(q=FTSE_vs_SPX, nmeans=3, df=df)
1 - ptukey(q=FTSE_vs_HSI, nmeans=3, df=df)
ptukey(q=SPX_vs_HSI, nmeans=3, df=df)
ptukey(q=SPX_vs_HSI, nmeans=3, df=df, lower.tail=F)
ptukey(q=SPX_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_SPX, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
AllIndex
SPX_HSI_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_SPX + 1/n_HSI))
FTSE_SPX_SE_ANOVA <- sqrt(Within_group_MSE *(1/n_FTSE + 1/n_SPX))
FTSE_HSI_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_FTSE + 1/n_HSI))
SPX_vs_HSI <- abs(mu_SPX - mu_HSI) / SPX_HSI_SE_ANOVA
FTSE_vs_SPX <- abs(mu_FTSE - mu_SPX) / FTSE_SPX_SE_ANOVA
FTSE_vs_HSI <- abs(mu_FTSE - mu_HSI) / FTSE_HSI_SE_ANOVA
ptukey(q=SPX_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_SPX, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
SPX_HSI_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_SPX + 1/n_HSI))
FTSE_SPX_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_FTSE + 1/n_SPX))
FTSE_HSI_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_FTSE + 1/n_HSI))
# q_Tukey = sqrt(2) t
SPX_vs_HSI <- abs(mu_SPX - mu_HSI) / SPX_HSI_SE_ANOVA / sqrt(2)
FTSE_vs_SPX <- abs(mu_FTSE - mu_SPX) / FTSE_SPX_SE_ANOVA / sqrt(2)
FTSE_vs_HSI <- abs(mu_FTSE - mu_HSI) / FTSE_HSI_SE_ANOVA / sqrt(2)
ptukey(q=SPX_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_SPX, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
# q_Tukey = sqrt(2) t
SPX_vs_HSI <- abs(mu_SPX - mu_HSI) / SPX_HSI_SE_ANOVA * sqrt(2)
FTSE_vs_SPX <- abs(mu_FTSE - mu_SPX) / FTSE_SPX_SE_ANOVA * sqrt(2)
FTSE_vs_HSI <- abs(mu_FTSE - mu_HSI) / FTSE_HSI_SE_ANOVA * sqrt(2)
ptukey(q=SPX_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_SPX, nmeans=3, df=df, lower.tail=FALSE)
ptukey(q=FTSE_vs_HSI, nmeans=3, df=df, lower.tail=FALSE)
SPX_HSI_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_SPX + 1/n_HSI))
FTSE_SPX_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_FTSE + 1/n_SPX))
FTSE_HSI_SE_ANOVA <- sqrt(Within_group_MSE * (1/n_FTSE + 1/n_HSI))
# q_Tukey = sqrt(2) t
SPX_vs_HSI <- abs(mu_SPX - mu_HSI) / SPX_HSI_SE_ANOVA * sqrt(2)
FTSE_vs_SPX <- abs(mu_FTSE - mu_SPX) / FTSE_SPX_SE_ANOVA * sqrt(2)
FTSE_vs_HSI <- abs(mu_FTSE - mu_HSI) / FTSE_HSI_SE_ANOVA * sqrt(2)
