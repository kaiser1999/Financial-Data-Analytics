alpha1_clayton<-sum1_clayton$coefficients[1]
alpha0_frank<-sum0_frank$coefficients[1]
alpha1_frank<-sum1_frank$coefficients[1]
#alpha0_t<-sum0_t$coefficients[1]
#alpha1_t<-sum1_t$coefficients[1]
cop0_gumbel <- gumbelCopula(alpha0_gumbel, dim=dim)
cop1_gumbel <- gumbelCopula(alpha1_gumbel, dim=dim)
cop0_frank <- frankCopula(alpha0_frank, dim=dim)
cop1_frank <- frankCopula(alpha1_frank, dim=dim)
cop0_clayton <- claytonCopula(alpha0_clayton, dim=dim)
cop1_clayton <- claytonCopula(alpha1_clayton, dim=dim)
cop0_gauss <- normalCopula(alpha0_gauss, dim=dim, dispstr="ex")
cop1_gauss <- normalCopula(alpha1_gauss, dim=dim, dispstr="ex")
#cop0_t <- tCopula(alpha0_t, dim=3)
#cop1_t <- tCopula(alpha1_t, dim=3)
prior<-1/2
#post0<-prior*dCopula(train[,-6],cop0)
#post1<-prior*dCopula(train[,-6],cop1)
#
#trainlabel<-NULL
#for(i in 1:n_train){
#lab<-which.max(cbind(post0,post1)[i,])-1
#trainlabel<-rbind(trainlabel,as.numeric(lab))
#}
#count=0
#for(i in 1:n_train){
# if(trainlabel[i]==train[i,(dim+1)]){count=count+1}
#}
#accuracy=count/n_train
#accuracy
#
post0_test_gauss<-prior*dCopula(pobs(test_df), cop0_gauss)
post1_test_gauss<-prior*dCopula(pobs(test_df), cop1_gauss)
post0_test_gumbel<-prior*dCopula(pobs(test_df), cop0_gumbel)
post1_test_gumbel<-prior*dCopula(pobs(test_df), cop1_gumbel)
post0_test_clayton<-prior*dCopula(pobs(test_df), cop0_clayton)
post1_test_clayton<-prior*dCopula(pobs(test_df), cop1_clayton)
post0_test_frank<-prior*dCopula(pobs(test_df), cop0_frank)
post1_test_frank<-prior*dCopula(pobs(test_df), cop1_frank)
post0_test_gauss<-prior*dCopula(test_df, cop0_gauss)
post1_test_gauss<-prior*dCopula(test_df, cop1_gauss)
post0_test_gumbel<-prior*dCopula(test_df, cop0_gumbel)
post1_test_gumbel<-prior*dCopula(test_df, cop1_gumbel)
post0_test_clayton<-prior*dCopula(test_df, cop0_clayton)
post1_test_clayton<-prior*dCopula(test_df, cop1_clayton)
post0_test_frank<-prior*dCopula(test_df, cop0_frank)
post1_test_frank<-prior*dCopula(test_df, cop1_frank)
#post0_test_t<-prior*dCopula(pobs(test_df), cop0_t)
#post1_test_t<-prior*dCopula(pobs(test_df), cop1_t)
test<-function(post0_test,post1_test){
testlabel<-NULL
for(i in 1:n_test){
lab<-which.max(cbind(post0_test,post1_test)[i,])-1
testlabel<-rbind(testlabel,as.numeric(lab))
}
count=0
for(i in 1:n_test){
if(testlabel[i]==test_df_label[i,(dim+1)]){count=count+1}
}
accuracy=count/n_test
return(accuracy)
}
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
post0_test_gauss<-prior*dCopula(pobs(test_df), cop0_gauss)
post1_test_gauss<-prior*dCopula(pobs(test_df), cop1_gauss)
post0_test_gumbel<-prior*dCopula(pobs(test_df), cop0_gumbel)
post1_test_gumbel<-prior*dCopula(pobs(test_df), cop1_gumbel)
post0_test_clayton<-prior*dCopula(pobs(test_df), cop0_clayton)
post1_test_clayton<-prior*dCopula(pobs(test_df), cop1_clayton)
post0_test_frank<-prior*dCopula(pobs(test_df), cop0_frank)
post1_test_frank<-prior*dCopula(pobs(test_df), cop1_frank)
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
#copula_dist <- mvdc(copula=gumbelCopula(param=15), margins=c("norm","norm"),paramMargins=list(list(mean=0, sd=1),list(mean=0.5, sd=1)))
#x_class0 <- rMvdc(1000,copula_dist)
gumbel.cop_class0 <- gumbelCopula(3.5, dim=5) #change me
x_class0 <- rCopula(n, gumbel.cop_class0)
margins <- c("norm", "norm", "norm", "norm", "norm")
paramMargins <- list(list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1))
copula_dist <- mvdc(copula=gumbelCopula(param=15, dim=5), margins=margins, paramMargins=paramMargins)
#x_class0 <- rMvdc(n, copula_dist)
#x_class0<- qnorm(x_class0)
#s3_0class1_X3<-runif(1000)
#x_class0<-unname(cbind(x_class0,s3_0))
#x_class0<-pobs(x_class0)
pobs_test0<-pobs(x_class0)
gumbel.cop_class1 <- gumbelCopula(1.5, dim=5) #change me
x_class1 <- rCopula(n, gumbel.cop_class1)
#copula_dist2 <- mvdc(copula=gumbelCopula(param=7.5), margins=c("norm","norm"),paramMargins=list(list(mean=0, sd=1),list(mean=-0.5, sd=1)))
#x_class1 <- rMvdc(1000,copula_dist2)
#x_class1<- qnorm(x_class1)
#s3_1<-runif(1000,min=0.5,max=1.5)
#x_class1<-unname(cbind(x_class1,s3_1))
#x_class1<-pobs(x_class1)
margins <- c("norm", "norm", "norm", "norm", "norm")
paramMargins <- list(list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1))
copula_dist <- mvdc(copula=gumbelCopula(param=15, dim=5), margins=margins, paramMargins=paramMargins)
#x_class1 <- rMvdc(n, copula_dist)
pobs_test1<-pobs(x_class1)
pobs_test<-rbind(pobs_test0,pobs_test1)
df_nolabel<-rbind(x_class0,x_class1)
df<-rbind(cbind(x_class0,0),cbind(x_class1,1))
id<-sample(1:(2*n), size=((2*n)*0.8))
id1<-id[id<=n]
id2<-id[id>n]-n
test_df<-pobs_test[-id,]
test_df_label<-df[-id,]
c0<-(x_class0[id1,])
c1<-(x_class1[id2,])
c0[is.na(c0)] <- 0
c1[is.na(c1)] <- 0
train_forpython<-rbind(cbind(c0,0),cbind(c1,1))
test_forpython<-test_df_label
df_py<-rbind(df_py,train_forpython,test_forpython)
df_train_py<-rbind(df_train_py,train_forpython)
df_test_py<-rbind(df_test_py,test_forpython)
train<-rbind(cbind(c0,0),cbind(c1,1))
fit.c0_gauss<-fitCopula(normalCopula(dim=dim, dispstr="ex"), pobs(c0), method="itau")
fit.c1_gauss<-fitCopula(normalCopula(dim=dim, dispstr="ex"), pobs(c1), method="itau")
fit.c0_gumbel<-fitCopula(gumbelCopula(dim=dim), pobs(c0), method="itau")
fit.c1_gumbel<-fitCopula(gumbelCopula(dim=dim), pobs(c1), method="itau")
fit.c0_clayton<-fitCopula(claytonCopula(dim=dim), pobs(c0), method="itau")
fit.c1_clayton<-fitCopula(claytonCopula(dim=dim), pobs(c1), method="itau")
fit.c0_frank<-fitCopula(frankCopula(dim=dim), pobs(c0), method="itau")
fit.c1_frank<-fitCopula(frankCopula(dim=dim), pobs(c1), method="itau")
#fit.c0_t<-fitCopula(tCopula(dim=3), pobs(c0))
#fit.c1_t<-fitCopula(tCopula(dim=3), pobs(c1))
sum0_gumbel<-summary(fit.c0_gumbel)
sum1_gumbel<-summary(fit.c1_gumbel)
sum0_gauss<-summary(fit.c0_gauss)
sum1_gauss<-summary(fit.c1_gauss)
sum0_frank<-summary(fit.c0_frank)
sum1_frank<-summary(fit.c1_frank)
sum0_clayton<-summary(fit.c0_clayton)
sum1_clayton<-summary(fit.c1_clayton)
#sum0_t<-summary(fit.c0_t)
#sum1_t<-summary(fit.c1_t)
alpha0_gauss<-sum0_gauss$coefficients[1]
alpha1_gauss<-sum1_gauss$coefficients[1]
alpha0_gumbel<-sum0_gumbel$coefficients[1]
alpha1_gumbel<-sum1_gumbel$coefficients[1]
alpha0_clayton<-sum0_clayton$coefficients[1]
alpha1_clayton<-sum1_clayton$coefficients[1]
alpha0_frank<-sum0_frank$coefficients[1]
alpha1_frank<-sum1_frank$coefficients[1]
#alpha0_t<-sum0_t$coefficients[1]
#alpha1_t<-sum1_t$coefficients[1]
cop0_gumbel <- gumbelCopula(alpha0_gumbel, dim=dim)
cop1_gumbel <- gumbelCopula(alpha1_gumbel, dim=dim)
cop0_frank <- frankCopula(alpha0_frank, dim=dim)
cop1_frank <- frankCopula(alpha1_frank, dim=dim)
cop0_clayton <- claytonCopula(alpha0_clayton, dim=dim)
cop1_clayton <- claytonCopula(alpha1_clayton, dim=dim)
cop0_gauss <- normalCopula(alpha0_gauss, dim=dim, dispstr="ex")
cop1_gauss <- normalCopula(alpha1_gauss, dim=dim, dispstr="ex")
#cop0_t <- tCopula(alpha0_t, dim=3)
#cop1_t <- tCopula(alpha1_t, dim=3)
prior<-1/2
#post0<-prior*dCopula(train[,-6],cop0)
#post1<-prior*dCopula(train[,-6],cop1)
#
#trainlabel<-NULL
#for(i in 1:n_train){
#lab<-which.max(cbind(post0,post1)[i,])-1
#trainlabel<-rbind(trainlabel,as.numeric(lab))
#}
#count=0
#for(i in 1:n_train){
# if(trainlabel[i]==train[i,(dim+1)]){count=count+1}
#}
#accuracy=count/n_train
#accuracy
#
post0_test_gauss<-prior*dCopula(pobs(test_df), cop0_gauss)
post1_test_gauss<-prior*dCopula(pobs(test_df), cop1_gauss)
post0_test_gumbel<-prior*dCopula(pobs(test_df), cop0_gumbel)
post1_test_gumbel<-prior*dCopula(pobs(test_df), cop1_gumbel)
post0_test_clayton<-prior*dCopula(pobs(test_df), cop0_clayton)
post1_test_clayton<-prior*dCopula(pobs(test_df), cop1_clayton)
post0_test_frank<-prior*dCopula(pobs(test_df), cop0_frank)
post1_test_frank<-prior*dCopula(pobs(test_df), cop1_frank)
post0_test_gauss<-prior*dCopula(test_df, cop0_gauss)
post1_test_gauss<-prior*dCopula(test_df, cop1_gauss)
post0_test_gumbel<-prior*dCopula(test_df, cop0_gumbel)
post1_test_gumbel<-prior*dCopula(test_df, cop1_gumbel)
post0_test_clayton<-prior*dCopula(test_df, cop0_clayton)
post1_test_clayton<-prior*dCopula(test_df, cop1_clayton)
post0_test_frank<-prior*dCopula(test_df, cop0_frank)
post1_test_frank<-prior*dCopula(test_df, cop1_frank)
#post0_test_t<-prior*dCopula(pobs(test_df), cop0_t)
#post1_test_t<-prior*dCopula(pobs(test_df), cop1_t)
test<-function(post0_test,post1_test){
testlabel<-NULL
for(i in 1:n_test){
lab<-which.max(cbind(post0_test,post1_test)[i,])-1
testlabel<-rbind(testlabel,as.numeric(lab))
}
count=0
for(i in 1:n_test){
if(testlabel[i]==test_df_label[i,(dim+1)]){count=count+1}
}
accuracy=count/n_test
return(accuracy)
}
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
post0_test_gauss<-prior*dCopula(pobs(test_df), cop0_gauss)
post1_test_gauss<-prior*dCopula(pobs(test_df), cop1_gauss)
post0_test_gumbel<-prior*dCopula(pobs(test_df), cop0_gumbel)
post1_test_gumbel<-prior*dCopula(pobs(test_df), cop1_gumbel)
post0_test_clayton<-prior*dCopula(pobs(test_df), cop0_clayton)
post1_test_clayton<-prior*dCopula(pobs(test_df), cop1_clayton)
post0_test_frank<-prior*dCopula(pobs(test_df), cop0_frank)
post1_test_frank<-prior*dCopula(pobs(test_df), cop1_frank)
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
?pobs
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
result_gauss
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
mean(u_test)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
?pobs
u_train_0
a <- dnorm(X_train[y_train==0,])
a
head(a)
head(u_train_0)
?dnorm
a <- pnorm(X_train[y_train==0,])
head(a)
head(u_train_0)
a <- X_train[y_train==0,]
mu <- apply(a, 2, mean)
mu
sig <- apply(a, 2, std)
sig <- apply(a, 2, stdev)
sig <- apply(a, 2, sd)
b <- pnorm(a, mu, sig)
head(b)
head(u_train_0)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
u_train_1_mu
u_train_1_sig
a <- pnorm(X_test[,2], u_train_1_mu[2], u_train_1_sig[2])
u_test_1[,2] - a
?pnorm
u_train_0 <- apply(X_train_0, 2, function(x) pnorm(x, mean=mean(x), sd=sd(x)))
u_train_1 <- apply(X_train_1, 2, function(x) pnorm(x, mean=mean(x), sd=sd(x)))
u_test_0 <- NULL; u_test_1 <- NULL
for (d in 1:x_dim){
u_test_0 <- cbind(u_test_0, pnorm(X_test[,d], u_train_0_mu[d], u_train_0_sig[d]))
u_test_1 <- cbind(u_test_1, pnorm(X_test[,d], u_train_1_mu[d], u_train_1_sig[d]))
}
u_test_1[,2] - a
fit_gauss_0 <- fitCopula(normalCopula(dim=x_dim, dispstr="ex"), u_train_0, method="itau")
fit_gauss_1 <- fitCopula(normalCopula(dim=x_dim, dispstr="ex"), u_train_1, method="itau")
fit_gumbel_0 <- fitCopula(gumbelCopula(dim=x_dim), u_train_0, method="itau")
fit_gumbel_1 <- fitCopula(gumbelCopula(dim=x_dim), u_train_1, method="itau")
fit_clayton_0 <- fitCopula(claytonCopula(dim=x_dim), u_train_0, method="itau")
fit_clayton_1 <- fitCopula(claytonCopula(dim=x_dim), u_train_1, method="itau")
fit_frank_0 <- fitCopula(frankCopula(dim=x_dim), u_train_0, method="itau")
fit_frank_1 <- fitCopula(frankCopula(dim=x_dim), u_train_1, method="itau")
fit_frank_0 <- fitCopula(frankCopula(dim=x_dim), u_train_0, method="itau")
fit_frank_1 <- fitCopula(frankCopula(dim=x_dim), u_train_1, method="itau")
#fit_t_0 <- fitCopula(tCopula(dim=x_dim, df.fixed=TRUE, df=4), u_train_0, method="itau") # similar to gaussian with high df
#fit_t_1 <- fitCopula(tCopula(dim=x_dim, df.fixed=TRUE, df=4), u_train_1, method="itau")
theta_gauss_0 <- coef(fit_gauss_0); theta_gauss_1 <- coef(fit_gauss_1)
theta_gumbel_0 <- coef(fit_gumbel_0); theta_gumbel_1 <- coef(fit_gumbel_1)
theta_clayton_0 <- coef(fit_clayton_0); theta_clayton_1 <- coef(fit_clayton_1)
theta_frank_0 <- coef(fit_frank_0); theta_frank_1 <- coef(fit_frank_1)
cop_gauss_0 <- normalCopula(theta_gauss_0, dim=x_dim, dispstr="ex")
cop_gauss_1 <- normalCopula(theta_gauss_1, dim=x_dim, dispstr="ex")
cop_gumbel_0 <- gumbelCopula(theta_gumbel_0, dim=x_dim)
cop_gumbel_1 <- gumbelCopula(theta_gumbel_1, dim=x_dim)
cop_clayton_0 <- claytonCopula(theta_clayton_0, dim=x_dim)
cop_clayton_1 <- claytonCopula(theta_clayton_1, dim=x_dim)
cop_frank_0 <- frankCopula(theta_frank_0, dim=x_dim)
cop_frank_1 <- frankCopula(theta_frank_1, dim=x_dim)
prior <- 1/2
post_test_gauss_0 <- prior*dCopula(u_test_0, cop_gauss_0)
post_test_gauss_1 <- prior*dCopula(u_test_1, cop_gauss_1)
post_test_gumbel_0 <- prior*dCopula(u_test_0, cop_gumbel_0)
post_test_gumbel_1 <- prior*dCopula(u_test_1, cop_gumbel_1)
post_test_clayton_0 <- prior*dCopula(u_test_0, cop_clayton_0)
post_test_clayton_1 <- prior*dCopula(u_test_1, cop_clayton_1)
post_test_frank_0 <- prior*dCopula(u_test_0, cop_frank_0)
post_test_frank_1 <- prior*dCopula(u_test_1, cop_frank_1)
pred_gauss <- apply(cbind(post_test_gauss_0, post_test_gauss_1), 1, which.max) - 1
pred_gumbel <- apply(cbind(post_test_gumbel_0, post_test_gumbel_1), 1, which.max) - 1
pred_clayton <- apply(cbind(post_test_clayton_0, post_test_clayton_1), 1, which.max) - 1
pred_frank <- apply(cbind(post_test_frank_0, post_test_frank_1), 1, which.max) - 1
result_gauss <- c(result_gauss, mean(pred_gauss == y_test))
result_gumbel <- c(result_gumbel, mean(pred_gumbel == y_test))
result_clayton <- c(result_clayton, mean(pred_clayton == y_test))
result_frank <- c(result_frank, mean(pred_frank == y_test))
print(result_gauss)
head(u_train_0)
head(pobs(X_train_0))
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
?pCopula
post_test_gauss_0 <- prior*pCopula(u_test_0, cop_gauss_0)
post_test_gauss_1 <- prior*pCopula(u_test_1, cop_gauss_1)
post_test_gumbel_0 <- prior*pCopula(u_test_0, cop_gumbel_0)
post_test_gumbel_1 <- prior*pCopula(u_test_1, cop_gumbel_1)
post_test_frank_0 <- prior*pCopula(u_test_0, cop_frank_0)
post_test_frank_1 <- prior*pCopula(u_test_1, cop_frank_1)
post_test_clayton_0 <- prior*pCopula(u_test_0, cop_clayton_0)
post_test_clayton_1 <- prior*pCopula(u_test_1, cop_clayton_1)
post_test_clayton_1
pred_gauss <- apply(cbind(post_test_gauss_0, post_test_gauss_1), 1, which.max) - 1
pred_gumbel <- apply(cbind(post_test_gumbel_0, post_test_gumbel_1), 1, which.max) - 1
pred_frank <- apply(cbind(post_test_frank_0, post_test_frank_1), 1, which.max) - 1
pred_clayton <- apply(cbind(post_test_clayton_0, post_test_clayton_1), 1, which.max) - 1
mean(pred_gauss == y_test)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
?set.seed
?coef
?numeric(123)
install.packages(zoo)
install.packages("zoo")
install.packages("MASS")
Sys.setenv(LANG = "en")
install.packages(c("MASS", "rstudioapi", "zoo"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sample(1:16, 16)
source("C:/Users/user/Dropbox/應用程式/Overleaf/Financial Data Analytics/chapters/10_Generalized_Linear_Models/Programme/PCR.R", echo=TRUE)
train.data
?write.csv
#############
write.csv(train.data, "Boston_train.csv")
gwd()
getwd()
screeplot(pcr_model, type="line")
screeplot(pcr_model, type="lines")
?princomp
pca <- princomp(medv~., data=train.data, cor=TRUE)
pca <- princomp("medv~.", data=train.data, cor=TRUE)
train.data[-c("medv")]
train.data[-"medv"]
train.data
pca <- princomp(train.data[-ncol(df)], cor=TRUE)
ncol(df)
ncol(train.data)
pca <- princomp(train.data[-ncol(train.data)], cor=TRUE)
screeplot(pca, type="lines")
pcr_model$scores
pcr_model$loadings
pcr_model$coefficients
pca$sdev
pca$sdev**2
s2 <- pca$sdev**2
cumsum(s2)/sum(s2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
############################################################
d <- read.csv("../Datasets/stock_1999_2002.csv", row.names=1)	  # read in data file
d <- as.ts(d)
u <- (lag(d) - d) / d
colnames(u) <- colnames(d)
library(zoo)
plot(zoo(d), plot.type="multiple", col=c("blue", "orange", "green"))
plot(zoo(u), plot.type="multiple", col=c("blue", "orange", "green"))
par(mfrow=c(3,2), mar=c(4,4,4,4))
# if the dist is normal, the plot should close to this line
# histogram; qq-normal plot; add a line for reference
hist(u[,"HSBC"]); qqnorm(u[,"HSBC"]); qqline(u[,"HSBC"])
hist(u[,"CLP"]); qqnorm(u[,"CLP"]); qqline(u[,"CLP"])
hist(u[,"CK"]); qqnorm(u[,"CK"]); qqline(u[,"CK"])
############################################################
shapiro.test(u[,"HSBC"])
shapiro.test(u[,"CLP"])
shapiro.test(u[,"CK"])
############################################################
u1 <- u[,"HSBC"]; u2 <- u[,"CLP"]; u3 <- u[,"CK"]
ks.test(u1, pnorm, mean=mean(u1), sd=sd(u1))
ks.test(u2, pnorm, mean=mean(u2), sd=sd(u2))
ks.test(u3, pnorm, mean=mean(u3), sd=sd(u3))
############################################################
library("tseries")
JB.test <- function(u){
z <- u - mean(u)            # Remove mean
n <- length(z)              # Sample size
s <- sd(z)*sqrt((n-1)/n)	# Population standard deviation
sk <- sum(z^3)/(n*s^3)      # Skewness
ku <- sum(z^4)/(n*s^4) - 3  # Excess Kurtosis
JB <- n * (sk^2/6 + ku^2/24)	# JB test statistics
p <- 1 - pchisq(JB, 2)      # chi-squared p-value
list("JB_stat"=JB, "p_value"=p)
}
JB.test(u[,"HSBC"])
jarque.bera.test(u[,"HSBC"])
JB.test(u[,"CLP"])
jarque.bera.test(u[,"CLP"])
JB.test(u[,"CK"])
jarque.bera.test(u[,"CK"])
############################################################
library("car")
QQt.plot <- function(u, comp=""){
z <- u - mean(u) # Remove mean
sz <- sort(z)		   # sort z
n <- length(z)		  # sample size
s <- sd(z)*sqrt((n-1)/n)	# Population standard deviation
ku <- sum(z^4)/(n*s^4) - 3	# Excess kurtosis
nu <- 6/ku + 4 # Degrees of freedom
i <- ((1:n)-0.5)/n  # create a vector of percentiles
q <- qt(i, nu)		  # percentile points from t(v)
plot(q, sz, main=paste("Self-defined t Q-Q Plot of ", comp, " Return"))
qqline(sz, distribution=function(p) qt(p, df=nu), probs=c(0.25, 0.75))
qqPlot(z, distribution="t", df=nu, envelope=FALSE, line="quartiles",
col.lines="black", lwd=1, cex=1, grid=FALSE, id=FALSE,
main=paste("t Q-Q Plot of ", comp, " Return"))
nu
}
par(mfrow=c(3,2), mar=c(4,4,4,4))
df_HSBC <- QQt.plot(u[,"HSBC"], comp="HSBC")
df_CLP <- QQt.plot(u[,"CLP"], comp="CLP")
df_CK <- QQt.plot(u[,"CK"], comp="CK")
############################################################
t_HSBC <- u[,"HSBC"]/sd(u[,"HSBC"])*sqrt(df_HSBC/(df_HSBC-2))
ks.test(t_HSBC, pt, df_HSBC)
t_CLP <- u[,"CLP"]/sd(u[,"CLP"])*sqrt(df_CLP/(df_CLP-2))
ks.test(t_CLP, pt, df_CLP)
t_CK <- u[,"CK"]/sd(u[,"CK"])*sqrt(df_CK/(df_CK-2))
ks.test(t_CK, pt, df_CK)
############################################################
n <- 180
u_180 <- tail(u, n)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
z_180 <- sweep(u_180, 2, mu_180)
md2_180 <- rowSums((z_180 %*% solve(S_180)) * z_180)
smd2_180 <- sort(md2_180)		# sort md2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,1))
qqplot(q, smd2_180, main="Chi2 Q-Q Plot")		# QQ-chisquare plot
qqline(smd2_180, distribution=function(p) qchisq(p, df=3))
ks.test(smd2_180, pchisq, 3)
############################################################
cor(u_180)
############################################################
pairs(u_180)
############################################################
par(mfrow=c(4,3), mar=c(4,4,4,4))
hist(d[,"HSBC"]); hist(d[,"CLP"]); hist(d[,"CK"])
qqnorm(d[,"HSBC"]); qqline(d[,"HSBC"])
qqnorm(d[,"CLP"]); qqline(d[,"CLP"])
qqnorm(d[,"CK"]); qqline(d[,"CK"])
plot(d[,"HSBC"], lag(d[,"HSBC"]))
plot(d[,"CLP"], lag(d[,"CLP"]))
plot(d[,"CK"], lag(d[,"CK"]))
plot(u[,"HSBC"], lag(u[,"HSBC"]))
plot(u[,"CLP"], lag(u[,"CLP"]))
plot(u[,"CK"], lag(u[,"CK"]))
############################################################
par(mfrow=c(3,3), mar=c(4,4,4,4))
acf(d[,"HSBC"]); acf(d[,"CLP"]); acf(d[,"CK"])
acf(u[,"HSBC"]); acf(u[,"CLP"]); acf(u[,"CK"])
acf(u[,"HSBC"]^2); acf(u[,"CLP"]^2); acf(u[,"CK"]^2)
############################################################
set.seed(4002)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
C_180 <- chol(S_180) # Cholesky decomposition of Sigma
# set s0 to the most recent price
s0 <- tail(d, 1)
s_pred <- c()
for (i in 1:90) {
z <- rnorm(3)
v <- mu_180 + t(C_180) %*% z
s1 <- s0 * (1 + t(v))	# new stock price
s_pred <- rbind(s_pred, s1)
s0 <- s1	# update s0
}
s_pred <- ts(s_pred, start=nrow(d)+1)
data <- ts.union(d, s_pred)
par(mfrow=c(1,1))
col <- c("blue", "orange", "green", "pink", "brown", "red")
plot(data, plot.type="s", col=col)
legend("topright", col=col, lty=1,
legend=c("HSBC", "CLP", "CK", "HSBC_pred", "CLP_pred", "CK_pred"))
smd2_180
q
library("car")
t.QQ.plot <- function(u, comp=""){
z <- u - mean(u) # Remove mean
sz <- sort(z)		   # sort z
n <- length(z)		  # sample size
s <- sd(z)*sqrt((n-1)/n)	# Population standard deviation
ku <- sum(z^4)/(n*s^4) - 3	# Excess kurtosis
nu <- 6/ku + 4 # Degrees of freedom
i <- ((1:n)-0.5)/n  # create a vector of percentiles
q <- qt(i, nu)		  # percentile points from t(v)
plot(q, sz, main=paste("Self-defined t Q-Q Plot of ", comp, " Return"))
qqline(sz, distribution=function(p) qt(p, df=nu), probs=c(0.25, 0.75))
qqPlot(z, distribution="t", df=nu, envelope=FALSE, line="quartiles",
col.lines="black", lwd=1, cex=1, grid=FALSE, id=FALSE,
main=paste("t Q-Q Plot of ", comp, " Return"))
nu
}
par(mfrow=c(3,2), mar=c(4,4,4,4))
df_HSBC <- t.QQ.plot(u[,"HSBC"], comp="HSBC")
df_CLP <- t.QQ.plot(u[,"CLP"], comp="CLP")
df_CK <- t.QQ.plot(u[,"CK"], comp="CK")
