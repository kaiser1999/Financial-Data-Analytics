ui=rbind(c(-1,-1), diag(2)),
ci=c(-1, rep(0, 2)))
self_model$par
################################################################################
n <- 180
u_180 <- tail(u, n)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
z_180 <- sweep(u_180, 2, mu_180)
d2_180 <- diag(z_180 %*% solve(S_180) %*% t(z_180))
sd2_180 <- sort(d2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,1))
qqplot(q, sd2_180, main="Chi2 Q-Q Plot")		# QQ-chisquare plot
abline(lsfit(q, sd2_180))
ncol(eta)
n <- 180
u_180 <- tail(u, n)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
z_180 <- sweep(u_180, 2, mu_180)
d2_180 <- diag(z_180 %*% solve(S_180) %*% t(z_180))
sd2_180 <- sort(d2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,2))
qqplot(q, sd2_180, main="Chi2 Q-Q Plot")
abline(lsfit(q, sd2_180))
################################################################################
d2_180_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
if (i > nrow(u)-n) {
d2_180_DCC <- c(d2_180_DCC, u[i,] %*% solve(H) %*% u[i,])
}
}
sd2_180_DCC <- sort(d2_180_DCC)
qqplot(q, sd2_180_DCC, main="Chi2 Q-Q Plot under DCC")
abline(lsfit(q, sd2_180_DCC))
a <- diag(z_180 %*% solve(S_180) %*% t(z_180))
dim(a)
length(a)
b <- rowSums((z_180 %*% solve(S_180)) * z_180)
length(b)
a - b
abs(sum(a - b))
sum(abs(a - b))
n <- 180
u_180 <- tail(u, n)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
z_180 <- sweep(u_180, 2, mu_180)
md2_180 <- rowSums((z_180 %*% solve(S_180)) * z_180)
smd2_180 <- sort(md2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,2))
qqplot(q, smd2_180, main="Chi2 Q-Q Plot")
qqline(smd2_180, distribution=function(p) qchisq(p, df=3))
################################################################################
md2_180_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
if (i > nrow(u)-n) {
md2_180_DCC <- c(md2_180_DCC, u[i,] %*% solve(H) %*% u[i,])
}
}
smd2_180_DCC <- sort(md2_180_DCC)
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC")
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
par(mfrow=c(1,2))
qqplot(q, smd2_180, main="Chi2 Q-Q Plot")
qqline(smd2_180, distribution=function(p) qchisq(p, df=3))
################################################################################
md2_180_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
if (i > nrow(u)-n) {
md2_180_DCC <- c(md2_180_DCC, u[i,] %*% solve(H) %*% u[i,])
}
}
smd2_180_DCC <- sort(md2_180_DCC)
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylab=c(0,14))
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
z_180 <- sweep(u_180, 2, mu_180)
md2_180 <- rowSums((z_180 %*% solve(S_180)) * z_180)
smd2_180 <- sort(md2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,2))
qqplot(q, smd2_180, main="Chi2 Q-Q Plot")
qqline(smd2_180, distribution=function(p) qchisq(p, df=3))
################################################################################
md2_180_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
if (i > nrow(u)-n) {
md2_180_DCC <- c(md2_180_DCC, u[i,] %*% solve(H) %*% u[i,])
}
}
smd2_180_DCC <- sort(md2_180_DCC)
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylim=c(0,14))
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
mu_180
md2_180_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
if (i > nrow(u)-n) {
md2_180_DCC <- c(md2_180_DCC,
z_180[i,] %*% solve(H) %*% z_180[i,])
}
}
z_180
md2_180_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
if (i > nrow(u)-n) {
u_i <- u[i,] - mu_180
md2_180_DCC <- c(md2_180_DCC, u_i %*% solve(H) %*% u_i)
}
}
smd2_180_DCC <- sort(md2_180_DCC)
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylim=c(0,14))
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
length(smd2_180_DCC )
md2_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
u_i <- u[i,] - mu_180
md2_180_DCC <- c(md2_180_DCC, u_i %*% solve(H) %*% u_i)
}
smd2_180_DCC <- sort(tail(md2_DCC, n))
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylim=c(0,14))
md2_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
u_i <- u[i,] - mu_180
md2_DCC <- c(md2_DCC, u_i %*% solve(H) %*% u_i)
}
smd2_180_DCC <- sort(tail(md2_DCC, n))
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylim=c(0,14))
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
u_i %*% solve(H) %*% u_i
u_i %*% solve(H) %*% t(u_i)
u_i %*% solve(H)
t(u_i) %*% solve(H)
t(u_i) %*% solve(H) %*% u_i
solve(H)
i = 1
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
H
dcc_GARCH@mfit$Q[[i]]
S_180
md2_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
u_i <- u[i,] - mu_180
md2_DCC <- c(md2_DCC, t(u_i) %*% solve(H) %*% u_i)
}
smd2_180_DCC <- sort(tail(md2_DCC, n))
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylim=c(0,14))
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
md2_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
u_i <- u[i,]
md2_DCC <- c(md2_DCC, t(u_i) %*% solve(H) %*% u_i)
}
smd2_180_DCC <- sort(tail(md2_DCC, n))
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylim=c(0,14))
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
n <- 180
u_180 <- tail(u, n)
mu_180 <- apply(u_180, 2, mean)
S_180 <- cov(u_180)
z_180 <- sweep(u_180, 2, mu_180)
md2_180 <- rowSums((z_180 %*% solve(S_180)) * z_180)
smd2_180 <- sort(md2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		# create percentile vector
q <- qchisq(i,3)		# compute quantiles
par(mfrow=c(1,2))
qqplot(q, smd2_180, main="Chi2 Q-Q Plot")
qqline(smd2_180, distribution=function(p) qchisq(p, df=3))
################################################################################
md2_DCC <- c()
for (i in 1:nrow(u)){
D <- diag(sigma[i,])
R <- dcc_GARCH@mfit$R[[i]]
H <- D %*% R %*% D
md2_DCC <- c(md2_DCC, u[i,] %*% solve(H) %*% u[i,])
}
smd2_180_DCC <- sort(tail(md2_DCC, n))
qqplot(q, smd2_180_DCC, main="Chi2 Q-Q Plot under DCC",
ylim=c(0,14))
qqline(smd2_180_DCC, distribution=function(p) qchisq(p, df=3))
smd2_180 <- sort(md2_180)		# sort d2 in ascendingly
i <- ((1:n)-0.5)/n		      # create percentile vector
q <- qchisq(i,3)		        # compute quantiles
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
### iris flower ###
################################################################################
X_iris <- iris[,-5]               # remove species label from iris
set.seed(4002)
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
km_iris$betweenss                 # between group sum of squares
km_iris$withinss                  # within group sum of squares
plot(X_iris, col=km_iris$cluster) # plot observations with color
################################################################################
table(km_iris$cluster, iris[,5])  # Classification table
################################################################################
### HSI ###
################################################################################
d <- read.csv("../Datasets/fin-ratio.csv")    # read in fin-ratio dataset
X_HSI <- d[,-7]                   # remove HSI label
set.seed(4002)
km_HSI <- kmeans(X_HSI, 2)        # K-means clustering with K=2
plot(X_HSI, col=km_HSI$cluster)   # plot observations with color
table(km_HSI$cluster, d[,7])      # Classification table
################################################################################
### iris flower ###
################################################################################
X1 <- X_iris[km_iris$cluster==1,] # select group by cluster label
X2 <- X_iris[km_iris$cluster==2,]
X3 <- X_iris[km_iris$cluster==3,]
(n1 <- nrow(X1)); (n2 <- nrow(X2)); (n3 <- nrow(X3))  # cluster size
apply(X1, 2, mean)                # cluster mean
apply(X2, 2, mean)
apply(X3, 2, mean)
sum(diag((n1-1)*var(X1)))         # tr(SSCP)
sum(diag((n2-1)*var(X2)))         # within group sum of squares
sum(diag((n3-1)*var(X3)))
m <- apply(X, 2, mean)            # overall mean
m <- apply(X_iris, 2, mean)       # overall mean
m <- matrix(rep(m, 3), nrow=3, byrow=T)   # matrix with row m
dm <- (km_iris$centers - m)^2     # (group mean - overall mean)^2
colsum <- apply(dm, 1, sum)       # column sum
sum(km_iris$size*colsum)          # between group sum of squares
plot(X_HSI, col=d[,7])            # plot observations with color
d <- read.csv("../Datasets/fin-ratio.csv")    # read in fin-ratio dataset
X_HSI <- d[,-7]                   # remove HSI label
plot(X_HSI, col=d[,7])            # plot observations with color
d[,7]
km_HSI$cluster
plot(X_HSI, col=d[,7]+1)          # plot observations with color
d <- read.csv("../Datasets/fin-ratio.csv")    # read in fin-ratio dataset
X_HSI <- d[,-7]                   # remove HSI label
plot(X_HSI, col=d[,7]+1)          # plot observations with color
set.seed(4002)
km_HSI <- kmeans(X_HSI, 2)        # K-means clustering with K=2
table(km_HSI$cluster, d[,7])      # Classification table
km_iris$size
m <- apply(X_iris, 2, mean)       # overall mean
m <- matrix(rep(m, 3), nrow=3, byrow=T)   # matrix with row m
dm <- (km_iris$centers - m)^2     # (group mean - overall mean)^2
colsum <- apply(dm, 1, sum)       # column sum
sum(km_iris$size*colsum)          # between group sum of squares
m
km_iris$centers
m <- apply(X_iris, 2, mean)       # overall mean
sweep(km_iris$centers, 2, m, FUN="-")
a = matrix(rep(m, 3), nrow=3, byrow=T)
km_iris$centers - m
sweep(km_iris$centers, 1, m, FUN="-")
km_iris$centers - a
m <- apply(X_iris, 2, mean)       # overall mean
# (group mean - overall mean)^2
dm <- (sweep(km_iris$centers, 2, m, FUN="-"))^2
colsum <- apply(dm, 1, sum)       # column sum
sum(km_iris$size*colsum)          # between group sum of squares
var(X1)
plot(X_iris, col=iris[,5])        # plot observations with color
X_iris <- iris[,-5]               # remove species label from iris
plot(X_iris, col=iris[,5])        # plot observations with color
set.seed(4002)
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
km_iris$betweenss                 # between group sum of squares
km_iris$withinss                  # within group sum of squares
km_iris$cluster
X_iris <- iris[,-5]               # remove species label from iris
plot(X_iris, col=iris[,5])        # plot observations with color
set.seed(4002)
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
km_iris$betweenss                 # between group sum of squares
km_iris$withinss                  # within group sum of squares
X_iris <- iris[,-5]               # remove species label from iris
plot(X_iris, col=iris[,5])        # plot observations with color
set.seed(4002)
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
km_iris$betweenss                 # between group sum of squares
km_iris$withinss                  # within group sum of squares
X_iris <- iris[,-5]               # remove species label from iris
plot(X_iris, col=iris[,5])        # plot observations with color
set.seed(4002)
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
km_iris$betweenss                 # between group sum of squares
km_iris$withinss                  # within group sum of squares
X_iris <- iris[,-5]               # remove species label from iris
plot(X_iris, col=iris[,5])        # plot observations with color
set.seed(4002)
(km_iris <- kmeans(X_iris, 3))    # K-means clustering with K=3
km_iris$betweenss                 # between group sum of squares
km_iris$withinss                  # within group sum of squares
d <- read.csv("../Datasets/fin-ratio.csv")    # read in fin-ratio dataset
X_HSI <- d[,-7]                   # remove HSI label
plot(X_HSI, col=d[,7]+1)          # plot observations with color
set.seed(4002)
km_HSI <- kmeans(X_HSI, 2)        # K-means clustering with K=2
table(km_HSI$cluster, d[,7])      # Classification table
X1 <- X_iris[km_iris$cluster==1,] # select group by cluster label
X2 <- X_iris[km_iris$cluster==2,]
X3 <- X_iris[km_iris$cluster==3,]
(n1 <- nrow(X1)); (n2 <- nrow(X2)); (n3 <- nrow(X3))  # cluster size
apply(X1, 2, mean)                # cluster mean
apply(X2, 2, mean)
apply(X3, 2, mean)
sum(diag((n1-1)*var(X1)))         # tr(SSCP)
sum(diag((n2-1)*var(X2)))         # within group sum of squares
sum(diag((n3-1)*var(X3)))
m <- apply(X_iris, 2, mean)       # overall mean
# (group mean - overall mean)^2
dm <- (sweep(km_iris$centers, 2, m, FUN="-"))^2
colsum <- apply(dm, 1, sum)       # column sum
sum(km_iris$size*colsum)          # between group sum of squares
dm
colSums(dm)
apply(dm, 1, sum)
sum(km_iris$size*rowSums(dm))     # between group sum of squares
X_HSI
names(X_HSI)
# Try several values of K, choose K so that stat. is maximized
kmstat <- function(X, K){
km <- kmeans(X, K)              # K-means clustering
n <- nrow(X)                    # sample size
wcss <- sum(km$withinss)        # within group ss
bcss <- km$betweenss            # between group ss
# km$cluster: the cluster to which each point is allocated
list(stat=(n-K)*bcss/((K-1)*wcss), km=km)
}
# Try kmeans(X, K) several times and output the best trial
best_km <- function(X, K, trial=5, seed=4002) {
set.seed(seed)
r0 <- 0
for (i in 1:trial) {
res <- kmstat(X, K)           # new trial
if (res$stat > r0) {          # update r0 if it is less than r
r0 <- res$stat; km0 <- res$km
}
}
print(paste0("K=", K, "; stat=", r0))
km0                             # best cluster
}
################################################################################
### iris flower ###
################################################################################
set.seed(4002)
km_iris2 <- best_km(X_iris, 2)    # try K=2
km_iris3 <- best_km(X_iris, 3)    # try K=3
km_iris4 <- best_km(X_iris, 4)    # try K=4
km_iris5 <- best_km(X_iris, 5)    # try K=5
################################################################################
table(km_iris3, iris[,5])         # classification table
table(km_iris3$cluster, iris[,5]) # classification table
km_HSI2 <- best_km(X_HSI, 2)      # try K=2
km_HSI3 <- best_km(X_HSI, 3)      # try K=3
km_HSI4 <- best_km(X_HSI, 4)      # try K=4
km_HSI5 <- best_km(X_HSI, 5)      # try K=5
################################################################################
par(mfrow=c(2,3))                 # 2x3 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_HSI)){
boxplot(X_HSI[,i]~km_HSI2$cluster, main=names(X_HSI)[i])
}
X_HSI <- d[,-7]                   # remove HSI label
km_HSI2 <- best_km(X_HSI, 2)      # try K=2
km_HSI3 <- best_km(X_HSI, 3)      # try K=3
km_HSI4 <- best_km(X_HSI, 4)      # try K=4
km_HSI5 <- best_km(X_HSI, 5)      # try K=5
################################################################################
par(mfrow=c(2,3))                 # 2x3 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_HSI)){
boxplot(X_HSI[,i]~km_HSI2$cluster, main=names(X_HSI)[i])
}
d <- read.csv("../Datasets/fin-ratio_cleaned.csv")   # read in cleaned HSI dataset
X_HSI <- d[,-7]                   # remove HSI label
km_HSI2 <- best_km(X_HSI, 2)      # try K=2
km_HSI3 <- best_km(X_HSI, 3)      # try K=3
km_HSI4 <- best_km(X_HSI, 4)      # try K=4
km_HSI5 <- best_km(X_HSI, 5)      # try K=5
################################################################################
par(mfrow=c(2,3))                 # 2x3 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_HSI)){
boxplot(X_HSI[,i]~km_HSI2$cluster, main=names(X_HSI)[i])
}
X_cHSI <- d[,-7]                  # remove HSI label
km_cHSI2 <- best_km(X_cHSI, 2)    # try K=2
km_cHSI3 <- best_km(X_cHSI, 3)    # try K=3
km_cHSI4 <- best_km(X_cHSI, 4)    # try K=4
km_cHSI5 <- best_km(X_cHSI, 5)    # try K=5
################################################################################
par(mfrow=c(2,3))                 # 2x3 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_HSI)){
boxplot(X_cHSI[,i]~km_cHSI2$cluster, main=names(X_cHSI)[i])
}
table(km_cHSI2$cluster, d[,7])    # classification table
for (i in 1:ncol(X_cHSI)){
boxplot(X_cHSI[,i]~km_cHSI2$cluster,
xlab="HSI", ylab=names(X_cHSI)[i])
}
?boxplot
# Try several values of K, choose K so that stat. is maximized
kmstat <- function(X, K){
km <- kmeans(X, K)              # K-means clustering
n <- nrow(X)                    # sample size
wcss <- sum(km$withinss)        # within group ss
bcss <- km$betweenss            # between group ss
# km$cluster: the cluster to which each point is allocated
list(stat=(n-K)*bcss/((K-1)*wcss), km=km)
}
# Try kmeans(X, K) several times and output the best trial
best_km <- function(X, K, trial=5, seed=4002) {
set.seed(seed)
r0 <- 0
for (i in 1:trial) {
res <- kmstat(X, K)           # new trial
if (res$stat > r0) {          # update r0 if it is less than r
r0 <- res$stat; km0 <- res$km
}
}
print(paste0("K=", K, "; stat=", r0))
km0                             # best cluster
}
################################################################################
### iris flower ###
################################################################################
km_iris2 <- best_km(X_iris, 2)    # try K=2
km_iris3 <- best_km(X_iris, 3)    # try K=3
km_iris4 <- best_km(X_iris, 4)    # try K=4
km_iris5 <- best_km(X_iris, 5)    # try K=5
################################################################################
table(km_iris3$cluster, iris[,5]) # classification table
################################################################################
### Cleaned HSI ###
################################################################################
d <- read.csv("../Datasets/fin-ratio_cleaned.csv")   # read in cleaned HSI dataset
X_cHSI <- d[,-7]                  # remove HSI label
km_cHSI2 <- best_km(X_cHSI, 2)    # try K=2
km_cHSI3 <- best_km(X_cHSI, 3)    # try K=3
km_cHSI4 <- best_km(X_cHSI, 4)    # try K=4
km_cHSI5 <- best_km(X_cHSI, 5)    # try K=5
################################################################################
table(km_cHSI2$cluster, d[,7])    # classification table
par(mfrow=c(2,3))                 # 2x3 multi-frame graphic
# boxplots for each variable
for (i in 1:ncol(X_cHSI)){
boxplot(X_cHSI[,i]~km_cHSI2$cluster,
xlab="HSI", ylab=names(X_cHSI)[i])
}
df_HSI <- read.csv("../Datasets/fin-ratio.csv")    # read in HSI dataset
X_HSI <- df_HSI[,-7]              # remove HSI label
plot(X_HSI, col=df_HSI[,7]+1)     # plot observations with color
set.seed(4002)
km_HSI <- kmeans(X_HSI, 2)        # K-means clustering with K=2
table(km_HSI$cluster, df_HSI[,7]) # Classification table
df_cHSI <- read.csv("../Datasets/fin-ratio_cleaned.csv")   # read in cleaned HSI dataset
X_cHSI <- df_cHSI[,-7]                # remove HSI label
km_iris2 <- best_km(X_iris, 2)        # try K=2
km_iris3 <- best_km(X_iris, 3)        # try K=3
km_iris4 <- best_km(X_iris, 4)        # try K=4
km_iris5 <- best_km(X_iris, 5)        # try K=5
km_cHSI2 <- best_km(X_cHSI, 2)        # try K=2
km_cHSI3 <- best_km(X_cHSI, 3)        # try K=3
km_cHSI4 <- best_km(X_cHSI, 4)        # try K=4
km_cHSI5 <- best_km(X_cHSI, 5)        # try K=5
table(km_cHSI2$cluster, df_cHSI[,7])  # classification table
par(mfrow=c(2,3))                     # 2x3 multi-frame graphic
