if(testlabel[i]==test_df_label[i,(dim+1)]){count=count+1}
}
accuracy=count/n_test
return(accuracy)
}
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
post0_test_gauss<-prior*dCopula(pobs(test_df), cop0_gauss)
post1_test_gauss<-prior*dCopula(pobs(test_df), cop1_gauss)
post0_test_gumbel<-prior*dCopula(pobs(test_df), cop0_gumbel)
post1_test_gumbel<-prior*dCopula(pobs(test_df), cop1_gumbel)
post0_test_clayton<-prior*dCopula(pobs(test_df), cop0_clayton)
post1_test_clayton<-prior*dCopula(pobs(test_df), cop1_clayton)
post0_test_frank<-prior*dCopula(pobs(test_df), cop0_frank)
post1_test_frank<-prior*dCopula(pobs(test_df), cop1_frank)
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
#copula_dist <- mvdc(copula=gumbelCopula(param=15), margins=c("norm","norm"),paramMargins=list(list(mean=0, sd=1),list(mean=0.5, sd=1)))
#x_class0 <- rMvdc(1000,copula_dist)
gumbel.cop_class0 <- gumbelCopula(3.5, dim=5) #change me
x_class0 <- rCopula(n, gumbel.cop_class0)
margins <- c("norm", "norm", "norm", "norm", "norm")
paramMargins <- list(list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1))
copula_dist <- mvdc(copula=gumbelCopula(param=15, dim=5), margins=margins, paramMargins=paramMargins)
#x_class0 <- rMvdc(n, copula_dist)
#x_class0<- qnorm(x_class0)
#s3_0class1_X3<-runif(1000)
#x_class0<-unname(cbind(x_class0,s3_0))
#x_class0<-pobs(x_class0)
pobs_test0<-pobs(x_class0)
gumbel.cop_class1 <- gumbelCopula(1.5, dim=5) #change me
x_class1 <- rCopula(n, gumbel.cop_class1)
#copula_dist2 <- mvdc(copula=gumbelCopula(param=7.5), margins=c("norm","norm"),paramMargins=list(list(mean=0, sd=1),list(mean=-0.5, sd=1)))
#x_class1 <- rMvdc(1000,copula_dist2)
#x_class1<- qnorm(x_class1)
#s3_1<-runif(1000,min=0.5,max=1.5)
#x_class1<-unname(cbind(x_class1,s3_1))
#x_class1<-pobs(x_class1)
margins <- c("norm", "norm", "norm", "norm", "norm")
paramMargins <- list(list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1), list(mean=0, sd=1))
copula_dist <- mvdc(copula=gumbelCopula(param=15, dim=5), margins=margins, paramMargins=paramMargins)
#x_class1 <- rMvdc(n, copula_dist)
pobs_test1<-pobs(x_class1)
pobs_test<-rbind(pobs_test0,pobs_test1)
df_nolabel<-rbind(x_class0,x_class1)
df<-rbind(cbind(x_class0,0),cbind(x_class1,1))
id<-sample(1:(2*n), size=((2*n)*0.8))
id1<-id[id<=n]
id2<-id[id>n]-n
test_df<-pobs_test[-id,]
test_df_label<-df[-id,]
c0<-(x_class0[id1,])
c1<-(x_class1[id2,])
c0[is.na(c0)] <- 0
c1[is.na(c1)] <- 0
train_forpython<-rbind(cbind(c0,0),cbind(c1,1))
test_forpython<-test_df_label
df_py<-rbind(df_py,train_forpython,test_forpython)
df_train_py<-rbind(df_train_py,train_forpython)
df_test_py<-rbind(df_test_py,test_forpython)
train<-rbind(cbind(c0,0),cbind(c1,1))
fit.c0_gauss<-fitCopula(normalCopula(dim=dim, dispstr="ex"), pobs(c0), method="itau")
fit.c1_gauss<-fitCopula(normalCopula(dim=dim, dispstr="ex"), pobs(c1), method="itau")
fit.c0_gumbel<-fitCopula(gumbelCopula(dim=dim), pobs(c0), method="itau")
fit.c1_gumbel<-fitCopula(gumbelCopula(dim=dim), pobs(c1), method="itau")
fit.c0_clayton<-fitCopula(claytonCopula(dim=dim), pobs(c0), method="itau")
fit.c1_clayton<-fitCopula(claytonCopula(dim=dim), pobs(c1), method="itau")
fit.c0_frank<-fitCopula(frankCopula(dim=dim), pobs(c0), method="itau")
fit.c1_frank<-fitCopula(frankCopula(dim=dim), pobs(c1), method="itau")
#fit.c0_t<-fitCopula(tCopula(dim=3), pobs(c0))
#fit.c1_t<-fitCopula(tCopula(dim=3), pobs(c1))
sum0_gumbel<-summary(fit.c0_gumbel)
sum1_gumbel<-summary(fit.c1_gumbel)
sum0_gauss<-summary(fit.c0_gauss)
sum1_gauss<-summary(fit.c1_gauss)
sum0_frank<-summary(fit.c0_frank)
sum1_frank<-summary(fit.c1_frank)
sum0_clayton<-summary(fit.c0_clayton)
sum1_clayton<-summary(fit.c1_clayton)
#sum0_t<-summary(fit.c0_t)
#sum1_t<-summary(fit.c1_t)
alpha0_gauss<-sum0_gauss$coefficients[1]
alpha1_gauss<-sum1_gauss$coefficients[1]
alpha0_gumbel<-sum0_gumbel$coefficients[1]
alpha1_gumbel<-sum1_gumbel$coefficients[1]
alpha0_clayton<-sum0_clayton$coefficients[1]
alpha1_clayton<-sum1_clayton$coefficients[1]
alpha0_frank<-sum0_frank$coefficients[1]
alpha1_frank<-sum1_frank$coefficients[1]
#alpha0_t<-sum0_t$coefficients[1]
#alpha1_t<-sum1_t$coefficients[1]
cop0_gumbel <- gumbelCopula(alpha0_gumbel, dim=dim)
cop1_gumbel <- gumbelCopula(alpha1_gumbel, dim=dim)
cop0_frank <- frankCopula(alpha0_frank, dim=dim)
cop1_frank <- frankCopula(alpha1_frank, dim=dim)
cop0_clayton <- claytonCopula(alpha0_clayton, dim=dim)
cop1_clayton <- claytonCopula(alpha1_clayton, dim=dim)
cop0_gauss <- normalCopula(alpha0_gauss, dim=dim, dispstr="ex")
cop1_gauss <- normalCopula(alpha1_gauss, dim=dim, dispstr="ex")
#cop0_t <- tCopula(alpha0_t, dim=3)
#cop1_t <- tCopula(alpha1_t, dim=3)
prior<-1/2
#post0<-prior*dCopula(train[,-6],cop0)
#post1<-prior*dCopula(train[,-6],cop1)
#
#trainlabel<-NULL
#for(i in 1:n_train){
#lab<-which.max(cbind(post0,post1)[i,])-1
#trainlabel<-rbind(trainlabel,as.numeric(lab))
#}
#count=0
#for(i in 1:n_train){
# if(trainlabel[i]==train[i,(dim+1)]){count=count+1}
#}
#accuracy=count/n_train
#accuracy
#
post0_test_gauss<-prior*dCopula(pobs(test_df), cop0_gauss)
post1_test_gauss<-prior*dCopula(pobs(test_df), cop1_gauss)
post0_test_gumbel<-prior*dCopula(pobs(test_df), cop0_gumbel)
post1_test_gumbel<-prior*dCopula(pobs(test_df), cop1_gumbel)
post0_test_clayton<-prior*dCopula(pobs(test_df), cop0_clayton)
post1_test_clayton<-prior*dCopula(pobs(test_df), cop1_clayton)
post0_test_frank<-prior*dCopula(pobs(test_df), cop0_frank)
post1_test_frank<-prior*dCopula(pobs(test_df), cop1_frank)
post0_test_gauss<-prior*dCopula(test_df, cop0_gauss)
post1_test_gauss<-prior*dCopula(test_df, cop1_gauss)
post0_test_gumbel<-prior*dCopula(test_df, cop0_gumbel)
post1_test_gumbel<-prior*dCopula(test_df, cop1_gumbel)
post0_test_clayton<-prior*dCopula(test_df, cop0_clayton)
post1_test_clayton<-prior*dCopula(test_df, cop1_clayton)
post0_test_frank<-prior*dCopula(test_df, cop0_frank)
post1_test_frank<-prior*dCopula(test_df, cop1_frank)
#post0_test_t<-prior*dCopula(pobs(test_df), cop0_t)
#post1_test_t<-prior*dCopula(pobs(test_df), cop1_t)
test<-function(post0_test,post1_test){
testlabel<-NULL
for(i in 1:n_test){
lab<-which.max(cbind(post0_test,post1_test)[i,])-1
testlabel<-rbind(testlabel,as.numeric(lab))
}
count=0
for(i in 1:n_test){
if(testlabel[i]==test_df_label[i,(dim+1)]){count=count+1}
}
accuracy=count/n_test
return(accuracy)
}
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
post0_test_gauss<-prior*dCopula(pobs(test_df), cop0_gauss)
post1_test_gauss<-prior*dCopula(pobs(test_df), cop1_gauss)
post0_test_gumbel<-prior*dCopula(pobs(test_df), cop0_gumbel)
post1_test_gumbel<-prior*dCopula(pobs(test_df), cop1_gumbel)
post0_test_clayton<-prior*dCopula(pobs(test_df), cop0_clayton)
post1_test_clayton<-prior*dCopula(pobs(test_df), cop1_clayton)
post0_test_frank<-prior*dCopula(pobs(test_df), cop0_frank)
post1_test_frank<-prior*dCopula(pobs(test_df), cop1_frank)
pred <- apply(cbind(post0_test_gauss, post1_test_gauss), 1, which.max) - 1
mean(pred == test_df_label[,(dim+1)])
?pobs
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
result_gauss
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
mean(u_test)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
?pobs
u_train_0
a <- dnorm(X_train[y_train==0,])
a
head(a)
head(u_train_0)
?dnorm
a <- pnorm(X_train[y_train==0,])
head(a)
head(u_train_0)
a <- X_train[y_train==0,]
mu <- apply(a, 2, mean)
mu
sig <- apply(a, 2, std)
sig <- apply(a, 2, stdev)
sig <- apply(a, 2, sd)
b <- pnorm(a, mu, sig)
head(b)
head(u_train_0)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
u_train_1_mu
u_train_1_sig
a <- pnorm(X_test[,2], u_train_1_mu[2], u_train_1_sig[2])
u_test_1[,2] - a
?pnorm
u_train_0 <- apply(X_train_0, 2, function(x) pnorm(x, mean=mean(x), sd=sd(x)))
u_train_1 <- apply(X_train_1, 2, function(x) pnorm(x, mean=mean(x), sd=sd(x)))
u_test_0 <- NULL; u_test_1 <- NULL
for (d in 1:x_dim){
u_test_0 <- cbind(u_test_0, pnorm(X_test[,d], u_train_0_mu[d], u_train_0_sig[d]))
u_test_1 <- cbind(u_test_1, pnorm(X_test[,d], u_train_1_mu[d], u_train_1_sig[d]))
}
u_test_1[,2] - a
fit_gauss_0 <- fitCopula(normalCopula(dim=x_dim, dispstr="ex"), u_train_0, method="itau")
fit_gauss_1 <- fitCopula(normalCopula(dim=x_dim, dispstr="ex"), u_train_1, method="itau")
fit_gumbel_0 <- fitCopula(gumbelCopula(dim=x_dim), u_train_0, method="itau")
fit_gumbel_1 <- fitCopula(gumbelCopula(dim=x_dim), u_train_1, method="itau")
fit_clayton_0 <- fitCopula(claytonCopula(dim=x_dim), u_train_0, method="itau")
fit_clayton_1 <- fitCopula(claytonCopula(dim=x_dim), u_train_1, method="itau")
fit_frank_0 <- fitCopula(frankCopula(dim=x_dim), u_train_0, method="itau")
fit_frank_1 <- fitCopula(frankCopula(dim=x_dim), u_train_1, method="itau")
fit_frank_0 <- fitCopula(frankCopula(dim=x_dim), u_train_0, method="itau")
fit_frank_1 <- fitCopula(frankCopula(dim=x_dim), u_train_1, method="itau")
#fit_t_0 <- fitCopula(tCopula(dim=x_dim, df.fixed=TRUE, df=4), u_train_0, method="itau") # similar to gaussian with high df
#fit_t_1 <- fitCopula(tCopula(dim=x_dim, df.fixed=TRUE, df=4), u_train_1, method="itau")
theta_gauss_0 <- coef(fit_gauss_0); theta_gauss_1 <- coef(fit_gauss_1)
theta_gumbel_0 <- coef(fit_gumbel_0); theta_gumbel_1 <- coef(fit_gumbel_1)
theta_clayton_0 <- coef(fit_clayton_0); theta_clayton_1 <- coef(fit_clayton_1)
theta_frank_0 <- coef(fit_frank_0); theta_frank_1 <- coef(fit_frank_1)
cop_gauss_0 <- normalCopula(theta_gauss_0, dim=x_dim, dispstr="ex")
cop_gauss_1 <- normalCopula(theta_gauss_1, dim=x_dim, dispstr="ex")
cop_gumbel_0 <- gumbelCopula(theta_gumbel_0, dim=x_dim)
cop_gumbel_1 <- gumbelCopula(theta_gumbel_1, dim=x_dim)
cop_clayton_0 <- claytonCopula(theta_clayton_0, dim=x_dim)
cop_clayton_1 <- claytonCopula(theta_clayton_1, dim=x_dim)
cop_frank_0 <- frankCopula(theta_frank_0, dim=x_dim)
cop_frank_1 <- frankCopula(theta_frank_1, dim=x_dim)
prior <- 1/2
post_test_gauss_0 <- prior*dCopula(u_test_0, cop_gauss_0)
post_test_gauss_1 <- prior*dCopula(u_test_1, cop_gauss_1)
post_test_gumbel_0 <- prior*dCopula(u_test_0, cop_gumbel_0)
post_test_gumbel_1 <- prior*dCopula(u_test_1, cop_gumbel_1)
post_test_clayton_0 <- prior*dCopula(u_test_0, cop_clayton_0)
post_test_clayton_1 <- prior*dCopula(u_test_1, cop_clayton_1)
post_test_frank_0 <- prior*dCopula(u_test_0, cop_frank_0)
post_test_frank_1 <- prior*dCopula(u_test_1, cop_frank_1)
pred_gauss <- apply(cbind(post_test_gauss_0, post_test_gauss_1), 1, which.max) - 1
pred_gumbel <- apply(cbind(post_test_gumbel_0, post_test_gumbel_1), 1, which.max) - 1
pred_clayton <- apply(cbind(post_test_clayton_0, post_test_clayton_1), 1, which.max) - 1
pred_frank <- apply(cbind(post_test_frank_0, post_test_frank_1), 1, which.max) - 1
result_gauss <- c(result_gauss, mean(pred_gauss == y_test))
result_gumbel <- c(result_gumbel, mean(pred_gumbel == y_test))
result_clayton <- c(result_clayton, mean(pred_clayton == y_test))
result_frank <- c(result_frank, mean(pred_frank == y_test))
print(result_gauss)
head(u_train_0)
head(pobs(X_train_0))
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
?pCopula
post_test_gauss_0 <- prior*pCopula(u_test_0, cop_gauss_0)
post_test_gauss_1 <- prior*pCopula(u_test_1, cop_gauss_1)
post_test_gumbel_0 <- prior*pCopula(u_test_0, cop_gumbel_0)
post_test_gumbel_1 <- prior*pCopula(u_test_1, cop_gumbel_1)
post_test_frank_0 <- prior*pCopula(u_test_0, cop_frank_0)
post_test_frank_1 <- prior*pCopula(u_test_1, cop_frank_1)
post_test_clayton_0 <- prior*pCopula(u_test_0, cop_clayton_0)
post_test_clayton_1 <- prior*pCopula(u_test_1, cop_clayton_1)
post_test_clayton_1
pred_gauss <- apply(cbind(post_test_gauss_0, post_test_gauss_1), 1, which.max) - 1
pred_gumbel <- apply(cbind(post_test_gumbel_0, post_test_gumbel_1), 1, which.max) - 1
pred_frank <- apply(cbind(post_test_frank_0, post_test_frank_1), 1, which.max) - 1
pred_clayton <- apply(cbind(post_test_clayton_0, post_test_clayton_1), 1, which.max) - 1
mean(pred_gauss == y_test)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
source("C:/Users/user/Desktop/CIBer/Copula/Copula_Simulations.R", echo=TRUE)
?set.seed
?coef
?numeric(123)
install.packages(zoo)
install.packages("zoo")
install.packages("MASS")
Sys.setenv(LANG = "en")
install.packages(c("MASS", "rstudioapi", "zoo"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sample(1:16, 16)
source("C:/Users/user/Dropbox/應用程式/Overleaf/Financial Data Analytics/chapters/10_Generalized_Linear_Models/Programme/PCR.R", echo=TRUE)
train.data
?write.csv
#############
write.csv(train.data, "Boston_train.csv")
gwd()
getwd()
screeplot(pcr_model, type="line")
screeplot(pcr_model, type="lines")
?princomp
pca <- princomp(medv~., data=train.data, cor=TRUE)
pca <- princomp("medv~.", data=train.data, cor=TRUE)
train.data[-c("medv")]
train.data[-"medv"]
train.data
pca <- princomp(train.data[-ncol(df)], cor=TRUE)
ncol(df)
ncol(train.data)
pca <- princomp(train.data[-ncol(train.data)], cor=TRUE)
screeplot(pca, type="lines")
pcr_model$scores
pcr_model$loadings
pcr_model$coefficients
pca$sdev
pca$sdev**2
s2 <- pca$sdev**2
cumsum(s2)/sum(s2)
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
library("tseries")
library("xts")
library("forecast")
df <- read.csv("../Datasets/Bitstamp_BTCUSD_2018_minute.csv", skip=1)
# Split prices into train (last quarter) and test (last day)
train_idx <- "2018-09-30" < df$date & df$date < "2018-12-31"
train_close <- rev(df$close[train_idx])
train_date <- rev(df$date[train_idx])
test_idx <- df$date > "2018-12-30"
test_close <- rev(df$close[test_idx])
test_date <- rev(df$date[test_idx])
acf(train_close, main=paste("ACF Plot of Bitcoin Price"))
par(mfrow=c(1, 2))
lag_price <- diff(train_close)
acf(lag_price, main=paste("ACF Plot of 1-lagged Bitcoin Price"))
pacf(lag_price, main=paste("PACF Plot of 1-lagged Bitcoin Price"))
p <- 0; q <- 2    # ACF: 2 significant lags; PACF: exponential decay
################################################################################
auto.arima(train_close, max.p=5, max.q=5, max.d=2, seasonal=FALSE, ic='aicc')
################################################################################
model <- Arima(ts(train_close), order=c(p, 1, q), seasonal=FALSE)
resid <- xts(model$residuals, order.by=strptime(train_date,
format="%Y-%m-%d %H:%M:%S"))
par(mfrow=c(1, 1))
plot(resid/sqrt(model$sigma2), type="h",
main="Standardized Residuals", ylab="")
round(coef(model), 6)
Box.test(resid, lag=10, type="Ljung-Box", fitdf=p+q)
hist_data <- train_close
arima_pred <- array(NA, dim=length(test_close))
hist_data <- train_close[(length(train_close)-50):length(train_close)]
arima_pred <- array(NA, dim=length(test_close))
a <- Arima(hist_data, model=model)
coef(a)
hist_data <- train_close[(length(train_close)-30):length(train_close)]
arima_pred <- array(NA, dim=length(test_close))
for (i in 1:length(test_close)) {
# update the model with old estimates of ARIMA parameters
model <- Arima(hist_data, model=model)
arima_pred[i] <- predict(model, n.ahead=1)$pred[1]
hist_data <- c(hist_data, test_close[i])
}
cbind(test_close, arima_pred)
ts_pred <- xts(cbind(test_close, arima_pred),
order.by=strptime(test_date, format="%Y-%m-%d %H:%M:%S"))
plot.xts(df_pred, main="Stock Price Prediction",
lwd=2, col=c("blue", "pink"))
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=2, col=c("blue", "pink"))
addLegend("topleft", lwd=2, ncol=2, bg="white", bty="o")
train_close[(length(train_close)-30):length(train_close)]
train_close
train_close[length(train_close)]
test_close[length(test_close)]
test_close[1]
df
df[1000,]
df[2000,]
df[c(1500:2000),]
df[c(1400:1500),]
test_date[1]
test_date[length(test_date)]
test_idx <- df$date > "2018-12-31"
test_date[1]
test_close <- rev(df$close[test_idx])
test_date <- rev(df$date[test_idx])
test_date[1]
train_date[1]
# Split prices into train (last quarter) and test (last day)
train_idx <- "2018-10-01" < df$date & df$date < "2018-12-31"
train_close <- rev(df$close[train_idx])
train_date <- rev(df$date[train_idx])
test_idx <- df$date > "2018-12-31"
test_close <- rev(df$close[test_idx])
test_date <- rev(df$date[test_idx])
c(train_date[1], tail(train_date, 1), test_date[1])
acf(train_close, main=paste("ACF Plot of Bitcoin Price"))
par(mfrow=c(1, 2))
lag_price <- diff(train_close)
acf(lag_price, main=paste("ACF Plot of 1-lagged Bitcoin Price"))
pacf(lag_price, main=paste("PACF Plot of 1-lagged Bitcoin Price"))
p <- 0; q <- 2    # ACF: 2 significant lags; PACF: exponential decay
################################################################################
auto.arima(train_close, max.p=5, max.q=5, max.d=2, seasonal=FALSE, ic='aicc')
model <- Arima(ts(train_close), order=c(p, 1, q), seasonal=FALSE)
resid <- xts(model$residuals, order.by=strptime(train_date,
format="%Y-%m-%d %H:%M:%S"))
par(mfrow=c(1, 1))
plot(resid/sqrt(model$sigma2), type="h",
main="Standardized Residuals", ylab="")
round(coef(model), 6)
Box.test(resid, lag=10, type="Ljung-Box", fitdf=p+q)
hist_data <- train_close[(length(train_close)-30):length(train_close)]
arima_pred <- array(NA, dim=length(test_close))
for (i in 1:length(test_close)) {
# update the model with old estimates of ARIMA parameters
model <- Arima(hist_data, model=model)
arima_pred[i] <- predict(model, n.ahead=1)$pred[1]
hist_data <- c(hist_data, test_close[i])
}
ts_pred <- xts(cbind(test_close, arima_pred),
order.by=strptime(test_date, format="%Y-%m-%d %H:%M:%S"))
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=2, col=c("blue", "pink"))
addLegend("topleft", lwd=2, ncol=2, bg="white", bty="o")
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=1, col=c("blue", "pink"))
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=c(1, 1.5), col=c("blue", "pink"))
addLegend("topleft", lwd=2, ncol=2, bg="white", bty="o")
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=c(1, 3), col=c("blue", "pink"))
addLegend("topleft", lwd=2, ncol=2, bg="white", bty="o")
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=c(1, 5), col=c("blue", "pink"))
addLegend("topleft", lwd=2, ncol=2, bg="white", bty="o")
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=c(1, 3), col=c("blue", "pink"))
addLegend("topleft", lwd=2, ncol=2, bg="white", bty="o")
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=c(1, 3), col=c("blue", "pink"))
addLegend("topright", lwd=2, ncol=2, bg="white", bty="o")
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=c(1, 3), col=c("blue", "pink"))
addLegend("topright", lwd=c(1, 3), ncol=2, bg="white", bty="o")
mean(diff(c(tail(train_date, 1), ts_pred$test_close))**2, na.rm=TRUE)
c(tail(train_date, 1), ts_pred$test_close)
mean(diff(c(tail(train_close, 1), ts_pred$test_close))**2, na.rm=TRUE)
mean((ts_pred$test_close - ts_pred$arima_pred)**2)
paste0("Standardized Residuals of ARIMA(", p, 1, q,")")
model$arma
paste0("Standardized Residuals of ARIMA(", p, ", ", d, ", ", q,")")
p <- 2; d <- 1; q <- 0
paste0("Standardized Residuals of ARIMA(", p, ", ", d, ", ", q,")"))
paste0("Standardized Residuals of ARIMA(", p, ", ", d, ", ", q,")")
paste0("Standardized Residuals of ARIMA(",
paste(p, d, q, sep=", "), ")")
hist_data <- tail(train_close, 30)
arima_pred <- array(NA, dim=length(test_close))
for (i in 1:length(test_close)) {
# update the model with old estimates of ARIMA parameters
model <- Arima(hist_data, model=model)
arima_pred[i] <- predict(model, n.ahead=1)$pred[1]
hist_data <- c(hist_data, test_close[i])
}
ts_pred <- xts(cbind(test_close, arima_pred),
order.by=strptime(test_date, format="%Y-%m-%d %H:%M:%S"))
plot.xts(ts_pred, main="Stock Price Prediction",
lwd=c(1, 3), col=c("blue", "pink"))
addLegend("topright", lwd=c(1, 3), ncol=2, bg="white", bty="o")
# using previous price to predict the next day price
mean(diff(c(tail(train_close, 1), ts_pred$test_close))**2, na.rm=TRUE)
mean((ts_pred$test_close - ts_pred$arima_pred)**2)
#Set directory: Run this on source instead of Console!!
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################################################################################
library("tseries")
library("xts")
library("forecast")
df <- read.csv("../Datasets/Bitstamp_BTCUSD_2018_minute.csv", skip=1)
# Split prices into train (last quarter) and test (last day)
train_idx <- "2018-10-01" < df$date & df$date < "2018-12-31"
train_close <- rev(df$close[train_idx])
train_date <- rev(df$date[train_idx])
test_idx <- df$date > "2018-12-31"
test_close <- rev(df$close[test_idx])
test_date <- rev(df$date[test_idx])
c(train_date[1], tail(train_date, 1), test_date[1])
acf(train_close, main=paste("ACF Plot of Bitcoin Price"))
par(mfrow=c(1, 2))
lag_price <- diff(train_close)
acf(lag_price, main=paste("ACF Plot of 1-lagged Bitcoin Price"))
pacf(lag_price, main=paste("PACF Plot of 1-lagged Bitcoin Price"))
# 1 lag difference; ACF: exponential decay; PACF: 2 significant lags
p <- 2; d <- 1; q <- 0
paste0("ARIMA(", paste(p, d, q, sep=", "), ")")
arima_name <- paste0("ARIMA(", paste(p, d, q, sep=", "), ")")
paste0("Standardized Residuals of ", arima_name)
paste("Standardized Residuals of", arima_name)
ts_pred <- xts(cbind(test_close, arima_pred),
order.by=strptime(test_date, format="%Y-%m-%d %H:%M:%S"))
plot.xts(ts_pred, main="Bitcoin Price Prediction",
lwd=c(1, 3), col=c("blue", "pink"))
addLegend("topright", lwd=c(1, 3), ncol=2, bg="white", bty="o",
legend.names=c("Actual", arima_name))
model <- Arima(ts(train_close), order=c(p, d, q), seasonal=FALSE)
resid <- xts(model$residuals,
order.by=strptime(train_date, format="%Y-%m-%d %H:%M:%S"))
model$sigma2
resid
model <- Arima(ts(train_close), order=c(p, d, q), seasonal=FALSE)
resid <- xts(model$residuals,
order.by=strptime(train_date, format="%Y-%m-%d %H:%M:%S"))
par(mfrow=c(1, 1))
plot(resid/sqrt(model$sigma2), type="h", ylab="",
main=paste("Standardized Residuals of", arima_name))
round(coef(model), 6)
Box.test(resid, lag=10, type="Ljung-Box", fitdf=p+q)
Box.test(resid, lag=30, type="Ljung-Box", fitdf=p+q)
Box.test(resid, lag=5, type="Ljung-Box", fitdf=p+q)
Box.test(resid, lag=8, type="Ljung-Box", fitdf=p+q)
Box.test(resid, lag=6, type="Ljung-Box", fitdf=p+q)
Box.test(resid, lag=7, type="Ljung-Box", fitdf=p+q)
Box.test(resid, lag=8, type="Ljung-Box", fitdf=p+q)
Box.test(resid, lag=7, type="Ljung-Box", fitdf=p+q)
